name: Build Box64 Bionic Nightly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"   # daily (UTC)

permissions:
  contents: write
  pull-requests: write

jobs:
  resolve-latest:
    name: Resolve upstream HEAD (commit)
    runs-on: ubuntu-latest
    outputs:
      sha:     ${{ steps.upstream.outputs.sha }}
      short:   ${{ steps.upstream.outputs.short }}
      datecode: ${{ steps.datecode.outputs.code }}
    steps:
      - name: Install tools (jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Resolve upstream Box64 HEAD SHA (robust)
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="ptitSeb"
          REPO="box64"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-bionic-nightly}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          default_branch="$(fetch "$API/repos/$OWNER/$REPO" | jq -r .default_branch)"
          [[ -z "$default_branch" || "$default_branch" == "null" ]] && default_branch="main"

          sha="$(fetch "$API/repos/$OWNER/$REPO/commits/${default_branch}" | jq -r .sha)"
          [[ -z "$sha" || "$sha" == "null" ]] && { echo "::error::Failed to resolve upstream HEAD SHA"; exit 1; }

          short="$(printf '%s' "$sha" | cut -c1-7)"
          echo "sha=${sha}"     >> "$GITHUB_OUTPUT"
          echo "short=${short}" >> "$GITHUB_OUTPUT"
          echo "Upstream ${default_branch} @ ${short}"

      - name: Decide date code (YYMMDD, KST)
        id: datecode
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

  build-android-bionic:
    name: Build & release ${{ needs.resolve-latest.outputs.short }}
    needs: [resolve-latest]
    runs-on: ubuntu-latest
    env:
      NDK_VERSION: r26b
      BUILD_TYPE:  Release

    steps:
      - name: Install build deps
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y git cmake make ninja-build python3 patchelf zstd file jq wget curl gh binutils

      - name: Skip if same-date asset exists
        id: dupe
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          FILENAME="box64-bionic-nightly-${DATECODE}.wcp"
          HTTP="$(curl -s -o /tmp/nightly.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg N "$FILENAME" '.assets[]?.name == $N' /tmp/nightly.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${FILENAME}; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout upstream Box64 (exact commit)
        if: steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ needs.resolve-latest.outputs.sha }}
          submodules: recursive
          path: src
          fetch-depth: 1

      # Upstream style: use NDK r26b and directly point to the aarch64 Android 31 clang
      - name: Prepare Android NDK r26b (upstream style)
        if: steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          curl -fsSL -o ndk.zip https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
          unzip -qq ndk.zip
          echo "NDK=$PWD/android-ndk-${NDK_VERSION}" >> $GITHUB_ENV
          echo "BOX64_COMPILER=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DANDROID=1 -DARM_DYNAREC=1 -DBAD_SIGNAL=1" >> $GITHUB_ENV

      - name: Configure (upstream-like CMake)
        if: steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          cd src
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_C_COMPILER="${BOX64_COMPILER}" \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
            -DZYDIS3=0 \
            -DSTATICBUILD=0 \
            -DBOX32=0
          cd -

      - name: Build
        if: steps.dupe.outputs.skip != 'true'
        run: cmake --build src/build -j"$(nproc)"

      - name: Verify ELF (Bionic traits)
        if: steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          echo "---- INTERP ----"
          readelf -lW src/build/box64 | sed -n 's/.*Requesting program interpreter: *//p'
          echo "---- NEEDED ----"
          readelf -dW src/build/box64 | awk '/NEEDED/{print $0}'
          echo "---- ANDROID NOTE ----"
          readelf -nW src/build/box64 | sed -n '/.note.android.ident/,/Displaying/p'

      - name: Package WCP
        if: steps.dupe.outputs.skip != 'true'
        env:
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
        run: |
          set -Eeuo pipefail
          mkdir -p Box64_WCP artifacts
          cp src/build/box64 Box64_WCP/box64
          chmod +x Box64_WCP/box64 || true
          cat > Box64_WCP/profile.json <<JSON
          {
            "type": "Box64",
            "versionName": "${SHORT}",
            "versionCode": 0,
            "description": "",
            "files": [
              { "source": "box64", "target": "\${bindir}/box64" }
            ]
          }
          JSON
          (cd Box64_WCP && tar --zstd -cf "../artifacts/box64-bionic-nightly-${DATECODE}.wcp" profile.json box64)

      - name: Upload artifact
        if: steps.dupe.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: box64-bionic-nightly-${{ needs.resolve-latest.outputs.datecode }}
          path: ./artifacts/box64-bionic-nightly-${{ needs.resolve-latest.outputs.datecode }}.wcp
          if-no-files-found: error
          retention-days: 7

      - name: Ensure/Update release (BOX64-BIONIC-NIGHTLY)
        if: steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          BODY=$'ðŸŒ™ Automated BOX64-BIONIC-NIGHTLY builds (rolling)\n\n'
          BODY+=$'Commit: ['"${SHORT}"'](https://github.com/ptitSeb/box64/commit/'"${SHA}"')\n'
          BODY+=$'_Based on ptitSeb'\''s release workflow_'

          if ! gh release view "BOX64-BIONIC-NIGHTLY" --repo "$REPO" >/dev/null 2>&1; then
            gh release create "BOX64-BIONIC-NIGHTLY" --repo "$REPO" -t "BOX64-BIONIC-NIGHTLY" -n "${BODY}"
          else
            gh release edit   "BOX64-BIONIC-NIGHTLY" --repo "$REPO" -t "BOX64-BIONIC-NIGHTLY" -n "${BODY}"
          fi
          gh release upload "BOX64-BIONIC-NIGHTLY" \
            "./artifacts/box64-bionic-nightly-${DATECODE}.wcp" \
            --repo "$REPO" --clobber

  watch-upstream-workflow:
    name: Watch upstream workflow changes
    runs-on: ubuntu-latest
    steps:
      - name: Install tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y jq curl gh

      - name: Fetch upstream workflow (raw)
        id: grab
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          RAW_URL="https://raw.githubusercontent.com/ptitSeb/box64/HEAD/.github/workflows/release.yml"
          curl -fsSL "$RAW_URL" -o /tmp/upstream_release.yml
          echo "sha=$(sha256sum /tmp/upstream_release.yml | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compare & PR if changed
        env:
          SHA_UP: ${{ steps.grab.outputs.sha }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          mkdir -p .github/upstream-cache
          CACHE=.github/upstream-cache/box64-release-workflow.sha256
          OLD_SHA="$(cat "$CACHE" 2>/dev/null || true)"
          if [ "$SHA_UP" != "$OLD_SHA" ]; then
            echo "$SHA_UP" > "$CACHE"
            BR="sync/upstream-release-$(date +%Y%m%d%H%M%S)"
            git switch -c "$BR"
            cp /tmp/upstream_release.yml .github/upstream-cache/box64-release.yml
            git add .github/upstream-cache/box64-release.yml "$CACHE"
            git -c user.name="github-actions[bot]" -c user.email="41898282+github-actions[bot]@users.noreply.github.com" commit -m "chore: update cached upstream release workflow (sha=$SHA_UP)"
            git push -u origin "$BR"
            gh pr create --fill --title "Sync: Upstream release workflow changed" --body "Auto-detected change in ptitSeb/box64 .github/workflows/release.yml. Review and mirror relevant flags/steps here if needed."
          else
            echo "No changes detected."
          fi
