name: Build Box64 Bionic Nightly v2

on:
  workflow_dispatch:        # Manual trigger (works on any branch)
  schedule:
    - cron: "0 18 * * 0"   # Weekly (UTC, every Sunday)

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# ──────────────────────────────────────────────────────────────────────────────
# 1) Upstream workflow watcher (GATE)
#    - If upstream release.yml changed: open PR and STOP builds
#    - If not changed: allow downstream build jobs to proceed
# ──────────────────────────────────────────────────────────────────────────────
jobs:
  check-upstream-workflow:
    name: Check upstream workflow changes (gate)
    runs-on: ubuntu-latest
    outputs:
      changed:   ${{ steps.compare.outputs.changed }}
      new_sha:   ${{ steps.hash.outputs.sha }}
    steps:
      - name: Install tools (jq, curl, gh)  # minimal footprint, no cache
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl gh ca-certificates

      - name: Fetch upstream workflow (raw)
        id: fetch
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          RAW_URL="https://raw.githubusercontent.com/ptitSeb/box64/HEAD/.github/workflows/release.yml"
          curl -fsSL "$RAW_URL" -o /tmp/upstream_release.yml

      - name: Hash upstream workflow (sha256)
        id: hash
        run: echo "sha=$(sha256sum /tmp/upstream_release.yml | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Checkout this repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compare current vs previous hash
        id: compare
        env:
          SHA_UP: ${{ steps.hash.outputs.sha }}
        run: |
          set -Eeuo pipefail
          mkdir -p .github/upstream-cache
          CACHE=.github/upstream-cache/box64-release-workflow.sha256
          OLD_SHA="$(cat "$CACHE" 2>/dev/null || true)"
          if [ "$SHA_UP" != "$OLD_SHA" ]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create PR when upstream changed (and update cache)
        if: steps.compare.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          SHA_UP:   ${{ steps.hash.outputs.sha }}
        run: |
          set -Eeuo pipefail
          CACHE=.github/upstream-cache/box64-release-workflow.sha256
          mkdir -p .github/upstream-cache
          echo "$SHA_UP" > "$CACHE"
          cp /tmp/upstream_release.yml .github/upstream-cache/box64-release.yml
          BR="sync/upstream-release-$(date +%Y%m%d%H%M%S)"
          git switch -c "$BR"
          git add .github/upstream-cache/box64-release.yml "$CACHE"
          git -c user.name="github-actions[bot]" \
              -c user.email="41898282+github-actions[bot]@users.noreply.github.com" \
              commit -m "chore: update cached upstream release workflow (sha=$SHA_UP)"
          git push -u origin "$BR"
          gh pr create --fill \
            --title "Sync: Upstream release workflow changed" \
            --body "Auto-detected change in ptitSeb/box64 .github/workflows/release.yml. Review and mirror relevant flags/steps here if needed."

# ──────────────────────────────────────────────────────────────────────────────
# 2) Resolve upstream commit (runs ONLY if upstream workflow did NOT change)
# ──────────────────────────────────────────────────────────────────────────────
  resolve-latest:
    name: Resolve upstream HEAD (commit)
    runs-on: ubuntu-latest
    needs: [check-upstream-workflow]
    if: needs.check-upstream-workflow.outputs.changed != 'true'
    outputs:
      sha:      ${{ steps.upstream.outputs.sha }}
      short:    ${{ steps.upstream.outputs.short }}
      datecode: ${{ steps.datecode.outputs.code }}
    steps:
      - name: Install tools (jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Resolve upstream Box64 HEAD SHA (robust)
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="ptitSeb"
          REPO="box64"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-bionic-nightly}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          default_branch="$(fetch "$API/repos/$OWNER/$REPO" | jq -r .default_branch)"
          [[ -z "$default_branch" || "$default_branch" == "null" ]] && default_branch="main"

          sha="$(fetch "$API/repos/$OWNER/$REPO/commits/${default_branch}" | jq -r .sha)"
          [[ -z "$sha" || "$sha" == "null" ]] && { echo "::error::Failed to resolve upstream HEAD SHA"; exit 1; }

          short="$(printf '%s' "$sha" | cut -c1-7)"
          echo "sha=${sha}"     >> "$GITHUB_OUTPUT"
          echo "short=${short}" >> "$GITHUB_OUTPUT"
          echo "Upstream ${default_branch} @ ${short}"

      - name: Decide date code (YYMMDD, KST)  # stable timezone-anchored code
        id: datecode
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

# ──────────────────────────────────────────────────────────────────────────────
# 3) Build & release (runs ONLY if upstream workflow did NOT change)
# ──────────────────────────────────────────────────────────────────────────────
  build-android-bionic:
    name: Build & release ${{ needs.resolve-latest.outputs.short }}
    needs: [resolve-latest]
    if: needs.check-upstream-workflow.outputs.changed != 'true'
    runs-on: ubuntu-latest
    env:
      NDK_VERSION: r26b
      BUILD_TYPE:  Release

    steps:
      # --- ultra-fast guard: exit early if same commit already released ---
      - name: Skip if already built same commit (API-based)
        id: guard_commit
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY"
          HTTP="$(curl -s -o /tmp/release.json -w '%{http_code}' \
                   -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$API" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg S "$SHA" '.body | contains($S)' /tmp/release.json >/dev/null; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "Same upstream commit already released; skipping."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Skip if same-date asset exists
        id: dupe
        if: steps.guard_commit.outputs.skip != 'true'
        env:
          GH_TOKEN:  ${{ github.token }}
          REPO:      ${{ github.repository }}
          DATECODE:  ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          FILENAME="box64-bionic-nightly-${DATECODE}.wcp"
          HTTP="$(curl -s -o /tmp/nightly.json -w '%{http_code}' \
                  -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
                  "$API/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY" || true)"
          if [ "$HTTP" = "200" ] && jq -e --arg N "$FILENAME" '.assets[]?.name == $N' /tmp/nightly.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${FILENAME}; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      # --- heavy work: only if something changed ---
      - name: Install build deps (minimal)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            git cmake make ninja-build python3 zstd file jq curl unzip ca-certificates \
            binutils  # readelf/strip

      - name: Checkout upstream Box64 (exact commit)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ needs.resolve-latest.outputs.sha }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Prepare Android NDK r26b (download & wire compilers)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          curl -fsSL -o ndk.zip "https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip"
          unzip -qq ndk.zip
          echo "NDK=$PWD/android-ndk-${NDK_VERSION}" >> $GITHUB_ENV
          echo "BOX64_COMPILER=$PWD/android-ndk-${NDK_VERSION}/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android31-clang" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DANDROID=1 -DARM_DYNAREC=1 -DBAD_SIGNAL=1" >> $GITHUB_ENV

      - name: Configure (CMake, upstream-like flags)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          cd src
          mkdir -p build && cd build
          cmake .. \
            -G Ninja \
            -DCMAKE_C_COMPILER="${BOX64_COMPILER}" \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
            -DZYDIS3=0 \
            -DSTATICBUILD=0 \
            -DBOX32=0
          cd -

      - name: Build (parallel)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: cmake --build src/build -j"$(nproc)"

      - name: Strip binary (safe, keep needed symbols)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          BIN="src/build/box64"
          [[ -f "$BIN" ]] || { echo "::error::Missing binary: $BIN"; exit 1; }
          STRIP_BIN="${NDK}/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip"
          if [[ -x "$STRIP_BIN" ]]; then
            "$STRIP_BIN" --strip-unneeded "$BIN"
          else
            strip --strip-unneeded "$BIN"
          fi
          file "$BIN"

      - name: Verify ELF (Bionic traits)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          echo "---- INTERP ----"
          readelf -lW src/build/box64 | sed -n 's/.*Requesting program interpreter: *//p'
          echo "---- NEEDED ----"
          readelf -dW src/build/box64 | awk '/NEEDED/{print $0}'
          echo "---- ANDROID NOTE ----"
          readelf -nW src/build/box64 | sed -n '/.note.android.ident/,/Displaying/p'

      - name: Package WCP (commit-based versionName, date-based versionCode)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
        run: |
          set -Eeuo pipefail
          mkdir -p Box64_WCP artifacts
          cp src/build/box64 Box64_WCP/box64
          chmod +x Box64_WCP/box64 || true

          cat > Box64_WCP/profile.json <<JSON
          {
            "type": "Box64",
            "versionName": "nightly-${SHORT}",
            "versionCode": ${DATECODE},
            "description": "${DATECODE} Box64-Bionic Build by Ari",
            "files": [
              { "source": "box64", "target": "\${bindir}/box64" }
            ]
          }
          JSON

          (cd Box64_WCP && tar --zstd --format=gnu --owner=0 --group=0 --numeric-owner --sort=name \
                -cf "../artifacts/box64-bionic-nightly-${DATECODE}.wcp" profile.json box64)

      - name: Ensure/Update release (BOX64-BIONIC-NIGHTLY)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          printf -v BODY '%s\n\n%s\n%s' \
            '🌙 Automated BOX64-BIONIC-NIGHTLY builds (rolling)' \
            "Commit: [${SHORT}](https://github.com/ptitSeb/box64/commit/${SHA})" \
            "_Based on ptitSeb'\''s release workflow_"

          if ! gh release view "BOX64-BIONIC-NIGHTLY" --repo "$REPO" >/dev/null 2>&1; then
            gh release create "BOX64-BIONIC-NIGHTLY" --repo "$REPO" \
              -t "BOX64-BIONIC-NIGHTLY" -n "$BODY"
          else
            gh release edit "BOX64-BIONIC-NIGHTLY" --repo "$REPO" \
              -t "BOX64-BIONIC-NIGHTLY" -n "$BODY"
          fi

          gh release upload "BOX64-BIONIC-NIGHTLY" \
            "./artifacts/box64-bionic-nightly-${DATECODE}.wcp" \
            --repo "$REPO" --clobber

      - name: Trim old assets (keep latest 5)
        if: steps.guard_commit.outputs.skip != 'true' && steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/${REPO}/releases/tags/BOX64-BIONIC-NIGHTLY"
          assets="$(curl -s -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" "$API" | jq -c '.assets | sort_by(.created_at)')"
          count="$(echo "$assets" | jq 'length')"
          if [ "$count" -gt 5 ]; then
            delcount=$((count-5))
            echo "::notice::Found $count assets, will delete $delcount oldest."
            echo "$assets" | jq -r ".[0:$delcount][] | .id" | while read -r id; do
              curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "https://api.github.com/repos/${REPO}/releases/assets/${id}"
              echo "Deleted asset id=$id"
            done
          else
            echo "::notice::Asset count $count (≤5), nothing to delete."
          fi
