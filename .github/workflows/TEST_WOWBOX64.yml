name: Build wowbox64.dll (upstream-style)

on:
  workflow_dispatch:
    inputs:
      llvm_mingw_version:
        description: llvm-mingw release tag (e.g. 20250430)
        required: false
        default: '20250430'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wowbox64:
    name: Build upstream wowbox64.dll only
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      LLVM_MINGW_VERSION: ${{ inputs.llvm_mingw_version }}
      BOX64_PLATFORM_MACRO: -DWOW64=1 -DARM_DYNAREC=1
    steps:
      - name: Install dependencies
        shell: bash
        run: |
          set -Eeuo pipefail
          sudo apt-get update -yq
          sudo apt-get install -yq --no-install-recommends \
            git cmake make \
            curl ca-certificates xz-utils file \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            binutils zstd

      - name: Download llvm-mingw (aarch64 host) and expose on PATH
        id: toolchain
        shell: bash
        run: |
          set -Eeuo pipefail
          url="https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64.tar.xz"
          echo "Downloading: $url"
          curl -fSLo llvm-mingw.tar.xz "$url"
          ROOT_DIR=$(tar -tf llvm-mingw.tar.xz | head -n1 | cut -d/ -f1)
          [ -n "$ROOT_DIR" ] || { echo "::error::Failed to detect root dir in llvm-mingw archive"; exit 1; }
          tar -xf llvm-mingw.tar.xz
          [ -d "$ROOT_DIR/bin" ] || { echo "::error::No bin directory in $ROOT_DIR"; ls -la; exit 1; }
          echo "$PWD/$ROOT_DIR/bin" >> "$GITHUB_PATH"
          echo "LLVM_MINGW_ROOT=$PWD/$ROOT_DIR" >> "$GITHUB_ENV"
          echo "== llvm-mingw bin listing =="; ls -la "$ROOT_DIR/bin" | sed -n '1,200p'

      - name: Checkout upstream Box64 (HEAD)
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          fetch-depth: 1
          submodules: recursive

      - name: Configure top-level (Linux target) per upstream style
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p build
          cd build
          cmake .. \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

      - name: Build only wowbox64 target if available
        shell: bash
        working-directory: build
        run: |
          set -Eeuo pipefail
          # Try to build the 'wowbox64' target (ExternalProject). If not present, fall back to full build.
          if cmake --build . --target help | grep -qi "wowbox64"; then
            cmake --build . --target wowbox64 -- -j"$(nproc)"
          else
            echo "::warning::Target 'wowbox64' not found in CMake help; building default target instead."
            cmake --build . -- -j"$(nproc)"
          fi

      - name: Locate and verify wowbox64.dll (ExternalProject output)
        id: out
        shell: bash
        run: |
          set -Eeuo pipefail
          # Upstream expects the dll under wowbox64 ExternalProject build tree
          CANDIDATE="build/wowbox64-prefix/src/wowbox64-build/wowbox64.dll"
          if [ -f "$CANDIDATE" ]; then
            DLL="$CANDIDATE"
          else
            DLL=$(find build -type f -iname 'wowbox64.dll' | head -n1 || true)
          fi
          if [ -z "$DLL" ]; then
            echo "::error::wowbox64.dll not produced"; exit 1
          fi
          file "$DLL"
          objdump -p "$DLL" | grep -qi 'machine.*ARM64' || { echo "::error::Expected ARM64 PE"; exit 1; }
          echo "dll=$DLL" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (dll only; no packaging)
        uses: actions/upload-artifact@v4
        with:
          name: wowbox64.dll
          path: ${{ steps.out.outputs.dll }}
          if-no-files-found: error
