name: Build wowbox64.dll only (one-shot)

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wowbox64:
    name: Build upstream wowbox64.dll (latest) and pack WCP
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 60
    env:
      LLVM_MINGW_VERSION: 20250430
    steps:
      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          sudo apt-get update -yq
          sudo apt-get install -yq --no-install-recommends \
            git cmake make python3 curl ca-certificates xz-utils file binutils \
            clang lld \
            gcc-mingw-w64-aarch64 g++-mingw-w64-aarch64 binutils-mingw-w64-aarch64

      - name: Download llvm-mingw (aarch64 host)
        run: |
          set -Eeuo pipefail
          url="https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64.tar.xz"
          curl -fsSL "$url" -o llvm-mingw.tar.xz
          tar -xf llvm-mingw.tar.xz
          echo "$PWD/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_PATH
          echo "MINGW_COMPILER_PATH=$PWD/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_ENV
          echo "LLVM_MINGW_ROOT=$PWD/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DWOW64=1 -DARM_DYNAREC=1" >> $GITHUB_ENV

      - name: Expose MinGW (aarch64) tools globally (best effort)
        run: |
          set -Eeuo pipefail
          BIN="$MINGW_COMPILER_PATH"
          for t in aarch64-w64-mingw32-clang aarch64-w64-mingw32-clang++ aarch64-w64-mingw32-as \
                   aarch64-w64-mingw32-windres llvm-rc llvm-ar llvm-ranlib clang clang++ \
                   aarch64-w64-mingw32-gcc aarch64-w64-mingw32-g++; do
            src="$BIN/$t"
            if [ -x "$src" ]; then
              sudo ln -sf "$src" "/usr/bin/$t"
            fi
          done

      - name: Sanity check toolchains
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x
          : "${MINGW_COMPILER_PATH:?MINGW_COMPILER_PATH not set}"
          : "${LLVM_MINGW_ROOT:?LLVM_MINGW_ROOT not set}"
          export PATH="$MINGW_COMPILER_PATH:$PATH"
          echo "PATH=$PATH"
          echo "== llvm-mingw bin listing =="
          ls -la "$MINGW_COMPILER_PATH" | sed -n '1,200p'
          echo "== apt mingw aarch64 presence =="
          command -v aarch64-w64-mingw32-gcc || true
          command -v aarch64-w64-mingw32-g++ || true
          command -v aarch64-w64-mingw32-as || true
          command -v aarch64-w64-mingw32-windres || true

      - name: Checkout upstream Box64 (HEAD)
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          fetch-depth: 1
          submodules: recursive

      - name: Record commit info
        id: git
        run: |
          set -Eeuo pipefail
          SHA=$(git rev-parse HEAD)
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "short=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Configure and build (WOW64 external project)
        shell: bash
        run: |
          set -Eeuo pipefail
          set -x

          : "${MINGW_COMPILER_PATH:?MINGW_COMPILER_PATH not set}"
          : "${LLVM_MINGW_ROOT:?LLVM_MINGW_ROOT not set}"
          export PATH="$MINGW_COMPILER_PATH:$PATH"

          BIN="$MINGW_COMPILER_PATH"
          # Detect preferred toolchain in order: llvm-mingw wrappers -> llvm-mingw clang -> apt gcc
          if [ -x "$BIN/aarch64-w64-mingw32-clang" ] && [ -x "$BIN/aarch64-w64-mingw32-clang++" ]; then
            MODE="llvm-mingw-wrappers"
            CC="$BIN/aarch64-w64-mingw32-clang"; CXX="$BIN/aarch64-w64-mingw32-clang++"; ASM_COMP="$BIN/aarch64-w64-mingw32-clang"
            RC_BIN="$BIN/llvm-rc"; [ -x "$RC_BIN" ] || RC_BIN="$BIN/aarch64-w64-mingw32-windres"
            CMAKE_EXTRA=""
          elif [ -x "$BIN/clang" ] || compgen -G "$BIN/clang-[0-9]*" >/dev/null; then
            MODE="llvm-mingw-clang"
            CLANG_BIN="$BIN/clang"; [ -x "$CLANG_BIN" ] || CLANG_BIN=$(compgen -G "$BIN/clang-[0-9]*" | head -n1)
            CLANGXX_BIN="$BIN/clang++"; [ -x "$CLANGXX_BIN" ] || CLANGXX_BIN=$(compgen -G "$BIN/clang++-[0-9]*" | head -n1)
            CC="$CLANG_BIN"; CXX="$CLANGXX_BIN"; ASM_COMP="$CLANG_BIN"
            RC_BIN="$BIN/llvm-rc"; [ -x "$RC_BIN" ] || RC_BIN="$BIN/aarch64-w64-mingw32-windres"
            CMAKE_EXTRA="-DCMAKE_C_COMPILER_TARGET=aarch64-w64-mingw32 -DCMAKE_CXX_COMPILER_TARGET=aarch64-w64-mingw32 -DCMAKE_ASM_COMPILER_TARGET=aarch64-w64-mingw32 -DCMAKE_ASM_FLAGS=-x\ assembler\ --target=aarch64-w64-mingw32 -DCMAKE_SYSROOT=${LLVM_MINGW_ROOT}"
          else
            MODE="apt-gcc"
            CC=$(command -v aarch64-w64-mingw32-gcc)
            CXX=$(command -v aarch64-w64-mingw32-g++)
            ASM_COMP=$(command -v aarch64-w64-mingw32-as)
            RC_BIN=$(command -v aarch64-w64-mingw32-windres)
            if [ -z "$CC" ] || [ -z "$CXX" ] || [ -z "$ASM_COMP" ] || [ -z "$RC_BIN" ]; then
              echo "::error::No usable Windows AArch64 cross compiler found (neither llvm-mingw nor apt)"; exit 1;
            fi
            CMAKE_EXTRA=""
          fi

          echo "Selected mode: $MODE"

          mkdir -p build
          cd build

          cmake .. \
            -DCMAKE_SYSTEM_NAME=Windows \
            -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
            -DCMAKE_C_COMPILER="${CC}" \
            -DCMAKE_CXX_COMPILER="${CXX}" \
            -DCMAKE_ASM_COMPILER="${ASM_COMP}" \
            -DCMAKE_RC_COMPILER="${RC_BIN}" \
            ${CMAKE_EXTRA} \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

          "$CC" --version || true
          "$CXX" --version || true

          make -j"$(nproc)"

      - name: Locate and verify wowbox64.dll
        id: out
        run: |
          set -Eeuo pipefail
          DLL=$(find build -type f -iname 'wowbox64.dll' | head -n1 || true)
          if [ -z "$DLL" ]; then
            echo "::error::wowbox64.dll not produced"; exit 1
          fi
          file "$DLL"
          objdump -p "$DLL" | grep -qi 'machine.*ARM64' || { echo "::error::Expected ARM64 PE"; exit 1; }
          echo "dll=$DLL" >> $GITHUB_OUTPUT

      - name: Decide date code (YYMMDD, KST)
        id: date
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> $GITHUB_OUTPUT

      - name: Package WCP (WowBox64)
        id: wcp
        env:
          DATECODE: ${{ steps.date.outputs.code }}
          SHORT:    ${{ steps.git.outputs.short }}
        run: |
          set -Eeuo pipefail
          mkdir -p out
          cp "${{ steps.out.outputs.dll }}" wowbox64.dll
          cat <<'JSON' > profile.json
          {
            "type": "WOWBox64",
            "versionName": "nightly-${SHORT}",
            "versionCode": ${DATECODE},
            "description": "${DATECODE} WowBox64 Build by Ari",
            "files": [
              { "source": "wowbox64.dll", "target": "${syswow64}/wowbox64.dll" }
            ]
          }
          JSON
          tar --zstd --format=gnu --owner=0 --group=0 --numeric-owner --sort=name \
            -cf "out/wowbox64-nightly-${DATECODE}.wcp" profile.json wowbox64.dll
          echo "wcp=out/wowbox64-nightly-${DATECODE}.wcp" >> $GITHUB_OUTPUT

      - name: Upload WCP artifact
        uses: actions/upload-artifact@v4
        with:
          name: wowbox64-nightly-${{ steps.date.outputs.code }}.wcp
          path: ${{ steps.wcp.outputs.wcp }}
          if-no-files-found: error
