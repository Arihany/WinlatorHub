name: Build wowbox64.dll only (one-shot)

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wowbox64:
    name: Build upstream wowbox64.dll (latest) and pack WCP
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 60
    env:
      LLVM_MINGW_VERSION: 20250430
    steps:
      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          sudo apt-get update -yq
          sudo apt-get install -yq --no-install-recommends \
            git gcc-aarch64-linux-gnu cmake make python3 \
            curl ca-certificates xz-utils file binutils

      - name: Download llvm-mingw (aarch64 host)
        run: |
          set -Eeuo pipefail
          url="https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64.tar.xz"
          curl -fsSL "$url" -o llvm-mingw.tar.xz
          tar -xf llvm-mingw.tar.xz
          echo "$PWD/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_PATH
          echo "MINGW_COMPILER_PATH=$PWD/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DWOW64=1 -DARM_DYNAREC=1" >> $GITHUB_ENV

      - name: Expose MinGW (aarch64) tools globally
        run: |
          set -Eeuo pipefail
          BIN="$MINGW_COMPILER_PATH"
          for t in aarch64-w64-mingw32-clang aarch64-w64-mingw32-clang++ aarch64-w64-mingw32-gcc aarch64-w64-mingw32-g++ \
                   aarch64-w64-mingw32-as aarch64-w64-mingw32-ar aarch64-w64-mingw32-ranlib \
                   aarch64-w64-mingw32-ld aarch64-w64-mingw32-windres aarch64-w64-mingw32-dlltool llvm-rc; do
            src="$BIN/$t"
            if [ -x "$src" ]; then
              sudo ln -sf "$src" "/usr/bin/$t"
            fi
          done

      - name: Checkout upstream Box64 (HEAD)
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          fetch-depth: 1
          submodules: recursive

      - name: Record commit info
        id: git
        run: |
          set -Eeuo pipefail
          SHA=$(git rev-parse HEAD)
          echo "sha=$SHA" >> $GITHUB_OUTPUT
          echo "short=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Configure and build (WOW64 external project)
        run: |
          set -Eeuo pipefail
          # Ensure toolchain is discoverable everywhere
          export PATH="$MINGW_COMPILER_PATH:$PATH"

          # Resolve absolute paths for the MinGW-w64 AArch64 toolchain
          CC=$(command -v aarch64-w64-mingw32-clang || true)
          CXX=$(command -v aarch64-w64-mingw32-clang++ || true)
          if [ -z "$CC" ] || [ -z "$CXX" ]; then
            CC=$(command -v aarch64-w64-mingw32-gcc)
            CXX=$(command -v aarch64-w64-mingw32-g++)
          fi
          AS=$(command -v aarch64-w64-mingw32-as)
          RC=$(command -v llvm-rc || command -v aarch64-w64-mingw32-windres)

          for v in CC CXX AS RC; do
            eval "val=\${$v}"
            if [ -z "$val" ]; then echo "::error::$v not found in PATH"; exit 1; fi
          done

          mkdir -p build
          cd build

          # Pin cross context for CMake and ExternalProject
          export CC="$CC"
          export CXX="$CXX"
          export ASM="$AS"
          export RC="$RC"
          export CMAKE_C_COMPILER="$CC"
          export CMAKE_CXX_COMPILER="$CXX"
          export CMAKE_ASM_COMPILER="$AS"
          export CMAKE_RC_COMPILER="$RC"
          export CMAKE_SYSTEM_NAME="Windows"
          export CMAKE_TRY_COMPILE_TARGET_TYPE="STATIC_LIBRARY"

          cmake .. \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON

          # Debug prints
          which aarch64-w64-mingw32-clang || true
          which aarch64-w64-mingw32-gcc || true
          which aarch64-w64-mingw32-as || true
          make -j"$(nproc)"

      - name: Locate and verify wowbox64.dll
        id: out
        run: |
          set -Eeuo pipefail
          DLL=$(find build -type f -iname 'wowbox64.dll' | head -n1 || true)
          if [ -z "$DLL" ]; then
            echo "::error::wowbox64.dll not produced"; exit 1
          fi
          file "$DLL"
          objdump -p "$DLL" | grep -qi 'machine.*ARM64' || { echo "::error::Expected ARM64 PE"; exit 1; }
          echo "dll=$DLL" >> $GITHUB_OUTPUT

      - name: Decide date code (YYMMDD, KST)
        id: date
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> $GITHUB_OUTPUT

      - name: Package WCP (WowBox64)
        id: wcp
        env:
          DATECODE: ${{ steps.date.outputs.code }}
          SHORT:    ${{ steps.git.outputs.short }}
        run: |
          set -Eeuo pipefail
          mkdir -p out
          cp "${{ steps.out.outputs.dll }}" wowbox64.dll
          cat <<JSON > profile.json
          {
            "type": "WOWBox64",
            "versionName": "nightly-${SHORT}",
            "versionCode": ${DATECODE},
            "description": "${DATECODE} WowBox64 Build by Ari",
            "files": [
              { "source": "wowbox64.dll", "target": "${syswow64}/wowbox64.dll" }
            ]
          }
          JSON
          tar --zstd --format=gnu --owner=0 --group=0 --numeric-owner --sort=name \
            -cf "out/wowbox64-nightly-${DATECODE}.wcp" profile.json wowbox64.dll
          echo "wcp=out/wowbox64-nightly-${DATECODE}.wcp" >> $GITHUB_OUTPUT

      - name: Upload WCP artifact
        uses: actions/upload-artifact@v4
        with:
          name: wowbox64-nightly-${{ steps.date.outputs.code }}.wcp
          path: ${{ steps.wcp.outputs.wcp }}
          if-no-files-found: error
