name: Build DXVK arm64ec

on:
  workflow_dispatch:              # Manual trigger (any branch)
  schedule:
    - cron: "0 18 * * *"         # Daily (UTC)

permissions:
  contents: write

# Consistent, strict, fast shell; no caching anywhere
defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Fast guard (detect new DXVK tag)
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      build: ${{ steps.decide.outputs.build }}
    steps:
      - name: Resolve upstream latest tag (DXVK)              # Prefer latest release; fallback to highest v* tag
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          API="https://api.github.com"
          OWNER="doitsujin"; REPO="dxvk"
          LATEST="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "$API/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)"
          if [[ -z "$LATEST" || "$LATEST" == "null" ]]; then
            LATEST="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                     "$API/repos/$OWNER/$REPO/tags?per_page=100" \
                     | jq -r '.[].name' | grep -E '^v[0-9]+' | sort -V | tail -n1)"
          fi
          [[ -z "$LATEST" ]] && { echo "::error::No upstream tag found"; exit 1; }
          echo "tag=$LATEST" >> "$GITHUB_OUTPUT"

      - name: Resolve current mirrored highest version (DXVK-ARM64EC)  # Read existing assets to compare
        id: local
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
        run: |
          CUR=""
          if gh release view "DXVK-ARM64EC" --repo "$REPO" >/dev/null 2>&1; then
            CUR="$(gh api repos/$REPO/releases/tags/DXVK-ARM64EC \
                 | jq -r '.assets[].name' \
                 | sed -n -E 's/^dxvk-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
                 | sort -V | tail -n1)"
          fi
          echo "cur=${CUR}" >> "$GITHUB_OUTPUT"
          echo "Current: ${CUR:-<none>}"

      - name: Decide build                                     # Build only if upstream > mirrored
        id: decide
        run: |
          UP="${{ steps.upstream.outputs.tag }}"
          CUR="${{ steps.local.outputs.cur }}"
          up_base="${UP#v}"
          if [[ -z "$CUR" ]]; then
            echo "build=true" >> "$GITHUB_OUTPUT"; exit 0
          fi
          if dpkg --compare-versions "$up_base" gt "$CUR"; then
            echo "build=true"  >> "$GITHUB_OUTPUT"
          else
            echo "build=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-release:
    name: Build & release arm64ec
    needs: guard
    if: needs.guard.outputs.build == 'true'
    runs-on: ubuntu-24.04
    env:
      DXVK_REPO: doitsujin/dxvk
      PREFIX_EC: ${{ github.workspace }}/dist-arm64ec
      PREFIX_X86: ${{ github.workspace }}/dist-x86
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: DXVK-ARM64EC
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Install host tooling (lean set; no cache)        # Minimal deps for cross-compile + packaging
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd gh

      - name: Ensure glslang (--vn) is available               # DXVK shader includes require --vn
        run: |
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          try() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if try glslang; then :
          elif try glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Download llvm-mingw (ucrt, ubuntu x86_64)        # Provides arm64ec/i686 clang toolchains
        run: |
          json=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest)
          url=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .browser_download_url' | head -n1)
          [[ -n "$url" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }
          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL -H "Authorization: Bearer $GH_TOKEN" "$url" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      - name: Create Meson cross files      # arm64ec (64-bit) + i686 (32-bit)
        run: |
          cat > "${{ github.workspace }}/arm64ec.cross" << 'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = 'arm64ec-w64-mingw32-gcc'
          cpp = 'arm64ec-w64-mingw32-g++'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'arm64ec-w64-mingw32-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF

          cat > "${{ github.workspace }}/i686.cross" << 'EOF'
          [binaries]
          ar = 'i686-w64-mingw32-ar'
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          windres = 'i686-w64-mingw32-windres'
          strip = 'i686-w64-mingw32-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF

          # Fallbacks when *windres is missing (use llvm-rc)
          for f in arm64ec i686; do
            command -v ${f}-w64-mingw32-windres >/dev/null || \
              sed -i "s/windres = .*/windres = 'llvm-rc'/" "${{ github.workspace }}/$f.cross"
          done

      - name: Clone DXVK (tags + submodules)                   # Full tag list required for multi-version loop
        run: |
          git clone --recurse-submodules https://github.com/${DXVK_REPO}.git src
          cd src && git fetch --tags --force

      - name: Resolve versions (>= v2.3.1) and compute NEW to build  # Skip already-uploaded versions
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          cd src
          git tag -l 'v*' \
            | { grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' || true; } \
            | sort -V \
            | awk '
                function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                  for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
                {ver=substr($0,2); if (cmp(ver,"2.3.1")>=0) print $0}
              ' > "${GITHUB_WORKSPACE}/versions.txt"

          : > "${GITHUB_WORKSPACE}/to_build.txt"
          EXIST="/tmp/exist.txt"; : > "$EXIST"
          if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh api repos/"${REPO}"/releases/tags/"${RELEASE_TAG}" \
              | jq -r '.assets[].name' \
              | sed -n -E 's/^dxvk-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > "$EXIST" || true
          fi
          while IFS= read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#v}"
            if ! grep -Fxq "$base" "$EXIST"; then
              echo "$tag $base" >> "${GITHUB_WORKSPACE}/to_build.txt"
            fi
          done < "${GITHUB_WORKSPACE}/versions.txt"

          echo "Candidates:";       cat "${GITHUB_WORKSPACE}/versions.txt" || true
          echo "Already uploaded:"; cat "$EXIST" || true
          echo "To build:";         cat "${GITHUB_WORKSPACE}/to_build.txt" || true

      - name: Build NEW versions only (arm64ec + x86) → WCP    # Meson -Dstrip=true for basic DLL strip
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          LIST="${GITHUB_WORKSPACE}/to_build.txt"
          if [[ ! -f "$LIST" || ! -s "$LIST" ]]; then
            echo "No new versions to build."; exit 0; fi

          while read -r tag base; do
            echo "::group::Build ${tag} (arm64ec/x86)"
            git checkout -f "$tag"
            git submodule update --init --recursive --checkout

            # Clean previous artifacts
            rm -rf "${GITHUB_WORKSPACE}/build.ec" "${GITHUB_WORKSPACE}/build.x86" \
                   "${PREFIX_EC}" "${PREFIX_X86}" "${GITHUB_WORKSPACE}/DXVK_WCP"

            # Configure & build (64-bit arm64ec)
            meson setup "${GITHUB_WORKSPACE}/build.ec" --cross-file "${GITHUB_WORKSPACE}/arm64ec.cross" \
              --buildtype release --prefix "${PREFIX_EC}" \
              -Dbuild_id=false -Dstrip=true \
              -Dc_args='-Wno-nontrivial-memcall' -Dcpp_args='-Wno-nontrivial-memcall'
            ninja -C "${GITHUB_WORKSPACE}/build.ec" -j"$(nproc)"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.ec"

            # Configure & build (32-bit x86)
            meson setup "${GITHUB_WORKSPACE}/build.x86" --cross-file "${GITHUB_WORKSPACE}/i686.cross" \
              --buildtype release --prefix "${PREFIX_X86}" \
              -Dbuild_id=false -Dstrip=true \
              -Dc_args='-Wno-nontrivial-memcall' -Dcpp_args='-Wno-nontrivial-memcall'
            ninja -C "${GITHUB_WORKSPACE}/build.x86" -j"$(nproc)"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.x86"

            # Collect DLLs (system32=64-bit arm64ec, syswow64=32-bit x86)
            mkdir -p "${GITHUB_WORKSPACE}/DXVK_WCP/system32" "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64"
            cp -v "${PREFIX_EC}/bin/"*.dll  "${GITHUB_WORKSPACE}/DXVK_WCP/system32/" || true
            cp -v "${PREFIX_X86}/bin/"*.dll "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64/" || true

            # Second strip pass omitted (Meson -Dstrip=true already applied)

            # Build file lists for profile.json
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x64.txt || true
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find syswow64 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x86.txt || true
            if [[ ! -s /tmp/x64.txt && ! -s /tmp/x86.txt ]]; then
              echo "::error::No DLLs discovered for ${base}"; exit 1; fi
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x64.txt  > /tmp/x64.json
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x86.txt  > /tmp/x86.json

            jq -n --arg VN "${base}" --argjson VC 0 --arg DESC "DXVK arm64ec build by Ari" \
                  --arg SYS '${system32}/' --arg WOW '${syswow64}/' \
                  --slurpfile x64 /tmp/x64.json --slurpfile x86 /tmp/x86.json '
              ($x64[0] // []) as $A | ($x86[0] // []) as $B |
              { type:"DXVK-ARM64EC", versionName:$VN, versionCode:$VC, description:$DESC,
                files: [ ($A[]? | {source:("system32/"+.), target:($SYS+.)}),
                         ($B[]? | {source:("syswow64/"+.), target:($WOW+.)}) ] }' \
              > "${GITHUB_WORKSPACE}/DXVK_WCP/profile.json"

            # Pack WCP (reproducible-ish tar settings)
            tar -C "${GITHUB_WORKSPACE}/DXVK_WCP" --zstd --format=gnu --owner=0 --group=0 --numeric-owner \
              -cf "${OUT}/dxvk-arm64ec-${base}.wcp" profile.json system32 syswow64
            echo "::endgroup::"
          done < "$LIST"   # ← ensure the loop actually reads the list

      - name: Build release notes (minimal)                    # Mention current if any artifacts were created
        run: |
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf '🤖 Automated arm64ec builds (2.3.1+)\n\n' > "$NOTES"
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-arm64ec-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-arm64ec-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            ver="${latest#dxvk-arm64ec-}"; ver="${ver%.wcp}"
            echo "Current: ${ver}" >> "$NOTES"
          fi
          cat "$NOTES"

      - name: Create/Update GitHub Release (DXVK-ARM64EC) + upload WCPs  # Append new artifacts (clobber same names)
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="DXVK-ARM64EC"
          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi
          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
