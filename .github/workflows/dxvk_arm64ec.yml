name: Build DXVK arm64ec

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"   # daily (UTC)

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -euo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Fast guard (detect new DXVK tag)
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      build: ${{ steps.decide.outputs.build }}
    steps:
      - name: Resolve upstream latest tag
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          API="https://api.github.com"
          OWNER="doitsujin"; REPO="dxvk"
          LATEST="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                   "$API/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)"
          if [[ -z "$LATEST" || "$LATEST" == "null" ]]; then
            LATEST="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" -H "Accept: application/vnd.github+json" \
                     "$API/repos/$OWNER/$REPO/tags?per_page=100" \
                     | jq -r '.[].name' | grep -E '^v[0-9]+' | sort -V | tail -n1)"
          fi
          [[ -z "$LATEST" ]] && { echo "::error::No upstream tag found"; exit 1; }
          echo "tag=$LATEST" >> "$GITHUB_OUTPUT"

      - name: Resolve current mirrored highest version (DXVK release)
        id: local
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
        run: |
          set -euo pipefail
          CUR=""
          if gh release view "DXVK-ARM64EC" --repo "$REPO" >/dev/null 2>&1; then
            CUR="$(gh api repos/$REPO/releases/tags/DXVK-ARM64EC \
                 | jq -r '.assets[].name' \
                 | sed -n -E 's/^dxvk-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
                 | sort -V | tail -n1)"
          fi
          echo "cur=${CUR}" >> "$GITHUB_OUTPUT"
          echo "Current: ${CUR:-<none>}"

      - name: Decide build
        id: decide
        run: |
          set -euo pipefail
          UP="${{ steps.upstream.outputs.tag }}"
          CUR="${{ steps.local.outputs.cur }}"
          up_base="${UP#v}"
          if [[ -z "$CUR" ]]; then
            echo "build=true" >> "$GITHUB_OUTPUT"; exit 0
          fi
          dpkg --compare-versions "$up_base" gt "$CUR" && echo "build=true" >> "$GITHUB_OUTPUT" || echo "build=false" >> "$GITHUB_OUTPUT"

  build-and-release:
    name: Build & release arm64ec
    needs: guard
    if: needs.guard.outputs.build == 'true'
    runs-on: ubuntu-24.04
    env:
      DXVK_REPO: doitsujin/dxvk
      PREFIX_EC: ${{ github.workspace }}/dist-arm64ec
      PREFIX_X86: ${{ github.workspace }}/dist-x86
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: DXVK-ARM64EC
      GITHUB_TOKEN: ${{ github.token }}  # for curl/gh

    steps:
      # --- 이하 원래 스텝 그대로 (순서만 가드 뒤로 이동) ---
      - name: Install host tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd ccache

      - name: Ensure glslang (--vn) available (compile-test, symlink if needed)
        run: |
          set -euo pipefail
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main(){}
          GLSL
          check_tool() {
            local t="$1"
            if command -v "$t" >/dev/null 2>&1; then
              if "$t" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; then
                echo "$t supports --vn"
                return 0
              fi
            fi
            return 1
          }
          if check_tool glslang; then
            :
          elif check_tool glslangValidator; then
            BIN="$HOME/.local/bin"
            mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::group::Diagnostics"
            command -v glslang && glslang --version || true
            command -v glslang && glslang --help | head -n 100 || true
            command -v glslangValidator && glslangValidator --version || true
            command -v glslangValidator && glslangValidator --help | head -n 100 || true
            echo "::endgroup::"
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Resolve llvm-mingw asset (ucrt, ubuntu x86_64)
        id: llvm
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          json=$(curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" \
                 https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest)
          url=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .browser_download_url' | head -n1)
          name=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .name' | head -n1)
          [[ -n "$url" && -n "$name" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }
          echo "url=$url"  >> "$GITHUB_OUTPUT"
          echo "name=$name" >> "$GITHUB_OUTPUT"

      - name: Cache llvm-mingw (extracted)
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ env.TOOLCHAIN_DIR }}
          key: llvm-mingw-${{ steps.llvm.outputs.name }}

      - name: Fetch llvm-mingw (if cache miss)
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir -p "$TOOLCHAIN_DIR"
          curl -fL -H "Authorization: Bearer $GITHUB_TOKEN" "${{ steps.llvm.outputs.url }}" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz

      - name: Add toolchain to PATH
        run: echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ runner.arch }}-dxvk
          restore-keys: |
            ccache-${{ runner.os }}-${{ runner.arch }}-

      - name: Configure ccache
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Create cross files
        run: |
          cat > "${{ github.workspace }}/arm64ec.cross" << 'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = ['ccache','arm64ec-w64-mingw32-gcc']
          cpp = ['ccache','arm64ec-w64-mingw32-g++']
          ld = 'arm64ec-w64-mingw32-ld'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'arm64ec-w64-mingw32-strip'
          widl = 'arm64ec-w64-mingw32-widl'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF

          cat > "${{ github.workspace }}/i686.cross" << 'EOF'
          [binaries]
          ar = 'i686-w64-mingw32-ar'
          c = ['ccache','i686-w64-mingw32-gcc']
          cpp = ['ccache','i686-w64-mingw32-g++']
          ld = 'i686-w64-mingw32-ld'
          windres = 'i686-w64-mingw32-windres'
          strip = 'i686-w64-mingw32-strip'
          widl = 'i686-w64-mingw32-widl'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF

          for f in arm64ec i686; do
            command -v ${f}-w64-mingw32-ld      >/dev/null || sed -i "/^ld =/d"   "${{ github.workspace }}/$f.cross"
            command -v ${f}-w64-mingw32-widl    >/dev/null || sed -i "/^widl =/d" "${{ github.workspace }}/$f.cross"
            command -v ${f}-w64-mingw32-windres >/dev/null || sed -i "s/windres = .*/windres = 'llvm-rc'/" "${{ github.workspace }}/$f.cross"
          done

      - name: Clone DXVK (full tags, submodules)
        run: |
          git clone --recurse-submodules https://github.com/${DXVK_REPO}.git src
          cd src
          git fetch --tags --force

      - name: Resolve upstream versions (>= v2.3.1) and compute NEW to build
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          cd src
          git tag -l 'v*' \
          | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
          | sort -V \
          | awk '
              function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
              {ver=substr($0,2); if (cmp(ver,"2.3.1")>=0) print $0}
            ' > "${GITHUB_WORKSPACE}/versions.txt"
          echo "All candidate tags:" && cat "${GITHUB_WORKSPACE}/versions.txt"

          EXIST_VERS="/tmp/exist_versions.txt"; : > "$EXIST_VERS"
          if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh api repos/"${REPO}"/releases/tags/"${RELEASE_TAG}" \
              | jq -r '.assets[].name' \
              | sed -n -E 's/^dxvk-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > "$EXIST_VERS" || true
          fi
          echo "Already published versions:" && cat "$EXIST_VERS" || true

          : > "${GITHUB_WORKSPACE}/to_build.txt"
          while IFS= read -r tag; do
            ver="${tag#v}"
            if ! grep -Fxq "$ver" "$EXIST_VERS"; then
              echo "$tag" >> "${GITHUB_WORKSPACE}/to_build.txt"
            fi
          done < "${GITHUB_WORKSPACE}/versions.txt"
          echo "New tags to build:" && (cat "${GITHUB_WORKSPACE}/to_build.txt" || true)

      - name: Build NEW versions only (package WCP)
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          # (원문 그대로)
          set -euo pipefail
          OUT="${GITHUB_WORKSPACE}/out"
          mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"
          if [[ ! -s "${GITHUB_WORKSPACE}/to_build.txt" ]]; then
            echo "No new versions to build."; exit 0; fi
          while IFS= read -r tag; do
            echo "::group::Build ${tag}"
            git checkout -f "$tag"
            git submodule update --init --recursive
            ver="${tag#v}"
            # ... (원문 패치/빌드/패키징 그대로) ...
            # [생략: 동일]
            echo "::endgroup::"
          done < "${GITHUB_WORKSPACE}/to_build.txt"

      - name: Build release notes (links only)
        run: |
          set -euo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf '🤖 Automated arm64ec builds (2.3.1+)\n\n' > "$NOTES"
          cat "$NOTES"

      - name: Create/Update GitHub Release (tag DXVK-ARM64EC) + upload new WCPs
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="DXVK-ARM64EC"
          printf '🤖 Automated arm64ec builds (2.3.1+)\n\n' > "$NOTES"
          cur=""
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-arm64ec-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-arm64ec-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            ver="${latest#dxvk-arm64ec-}"; ver="${ver%.wcp}"
            cur="$ver"
          else
            if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
              assets_json="$(gh api repos/${REPO}/releases/tags/${RELEASE_TAG})"
              mapfile -t list < <(echo "$assets_json" | jq -r '.assets[].name' | grep -E '^dxvk-arm64ec-.*\.wcp$' | LC_ALL=C sort -V)
              if ((${#list[@]} > 0)); then latest="${list[-1]}"; ver="${latest#dxvk-arm64ec-}"; ver="${ver%.wcp}"; cur="$ver"; fi
            fi
          fi
          [[ -n "$cur" ]] && echo "Current: ${cur}" >> "$NOTES"
          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi
          if compgen -G "out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" out/*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
