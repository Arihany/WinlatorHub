name: Build wowbox64.dll only (one‑shot)

on:
  workflow_dispatch:

permissions:
  contents: read
\ nconcurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wowbox64:
    name: Build upstream wowbox64.dll (latest HEAD) + WCP package
    runs-on: ubuntu-22.04-arm
    timeout-minutes: 60
    env:
      LLVM_MINGW_VERSION: 20250430
    steps:
      - name: Install dependencies
        run: |
          set -Eeuo pipefail
          sudo apt-get update -yq
          sudo apt-get install -yq --no-install-recommends \
            git gcc-aarch64-linux-gnu cmake make python3 \
            curl ca-certificates xz-utils file binutils

      - name: Download llvm-mingw (aarch64 host)
        run: |
          set -Eeuo pipefail
          url="https://github.com/mstorsjo/llvm-mingw/releases/download/${LLVM_MINGW_VERSION}/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64.tar.xz"
          curl -fsSL "$url" -o llvm-mingw.tar.xz
          tar -C "$GITHUB_WORKSPACE" -xf llvm-mingw.tar.xz
          echo "MINGW_COMPILER_PATH=$GITHUB_WORKSPACE/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/llvm-mingw-${LLVM_MINGW_VERSION}-ucrt-ubuntu-22.04-aarch64/bin" >> $GITHUB_PATH
          echo "BOX64_COMPILER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "BOX64_PLATFORM_MACRO=-DWOW64=1 -DARM_DYNAREC=1" >> $GITHUB_ENV

      - name: Checkout upstream Box64 (default branch HEAD)
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          fetch-depth: 0
          submodules: recursive

      - name: Record commit info
        id: git
        run: |
          set -Eeuo pipefail
          SHA=$(git rev-parse HEAD)
          SHORT=${SHA:0:7}
          echo "sha=$SHA"   >> $GITHUB_OUTPUT
          echo "short=$SHORT" >> $GITHUB_OUTPUT
          echo "Upstream HEAD @ $SHORT"

      - name: Configure and build (WOW64 external project)
        run: |
          set -Eeuo pipefail
          export PATH="$PATH:${MINGW_COMPILER_PATH}"
          mkdir -p build && cd build
          cmake .. \
            -DCMAKE_C_COMPILER=${BOX64_COMPILER} \
            ${BOX64_PLATFORM_MACRO} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON
          make -j"$(nproc)"

      - name: Find and verify wowbox64.dll
        id: out
        run: |
          set -Eeuo pipefail
          DLL=$(find build -type f -iname 'wowbox64.dll' | head -n1 || true)
          if [[ -z "$DLL" ]]; then
            echo "::error::wowbox64.dll not produced by build"; exit 1
          fi
          file "$DLL"
          if ! objdump -p "$DLL" | grep -qi 'machine.*ARM64'; then
            echo "::error::Expected ARM64 PE DLL, signature mismatch"; exit 1
          fi
          echo "dll=$DLL" >> $GITHUB_OUTPUT

      - name: Decide date code (YYMMDD, KST)
        id: date
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

      - name: Package WCP (WowBox64)
        id: wcp
        env:
          DATECODE: ${{ steps.date.outputs.code }}
          SHORT:    ${{ steps.git.outputs.short }}
        run: |
          set -Eeuo pipefail
          mkdir -p out
          # 산출물 이름은 그대로 유지 (rename 금지)
          cp "${{ steps.out.outputs.dll }}" wowbox64.dll
          # 변수 확장을 위해 unquoted heredoc 사용, syswow64 변수는 이스케이프
          cat <<JSON > profile.json
          {
            "type": "WOWBox64",
            "versionName": "nightly-${SHORT}",
            "versionCode": ${DATECODE},
            "description": "${DATECODE} WowBox64 Build by Ari",
            "files": [
              { "source": "wowbox64.dll", "target": "\${syswow64}/wowbox64.dll" }
            ]
          }
          JSON
          tar --zstd --format=gnu --owner=0 --group=0 --numeric-owner --sort=name \
            -cf "out/wowbox64-nightly-${DATECODE}.wcp" profile.json wowbox64.dll
          echo "wcp=out/wowbox64-nightly-${DATECODE}.wcp" >> $GITHUB_OUTPUT

      - name: Upload WCP artifact
        uses: actions/upload-artifact@v4
        with:
          name: wowbox64-nightly-${{ steps.date.outputs.code }}.wcp
          path: ${{ steps.wcp.outputs.wcp }}
          if-no-files-found: error
        uses: actions/upload-artifact@v4
        with:
          name: wowbox64-nightly-${{ steps.date.outputs.code }}.wcp
          path: ${{ steps.wcp.outputs.wcp }}
          if-no-files-found: error
