name: Build Box64 Glibc Stable

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"
    
permissions:
  contents: write

jobs:
  resolve-latest:
    name: Resolve latest stable tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      base: ${{ steps.tag.outputs.base }}
    steps:
      - name: Install tools (jq, curl)
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Resolve latest upstream stable tag (robust)
        id: tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="ptitSeb"
          REPO="box64"

          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-box64-stable-workflow}")

          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "${ua[@]}" "$1"; }

          # Prefer official "latest" stable release
          tag="$(fetch "$API/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)"
          # Fallback to newest non-prerelease
          if [[ -z "$tag" || "$tag" == "null" ]]; then
            tag="$(fetch "$API/repos/$OWNER/$REPO/releases?per_page=30" \
                   | jq -r '[ .[] | select(.prerelease==false) ][0].tag_name // empty')"
          fi

          [[ -z "$tag" ]] && { echo "::error::Failed to resolve latest stable tag"; exit 1; }

          base="${tag#v}"  # drop leading v
          echo "tag=$tag"   >> "$GITHUB_OUTPUT"
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "Latest stable: $tag (base: $base)"

  ensure-release:
    name: Ensure BOX64-STABLE release body (latest only)
    needs: resolve-latest
    runs-on: ubuntu-latest
    steps:
      - name: Create/Update release (tag = BOX64-STABLE)
        uses: softprops/action-gh-release@v2
        with:
          name: "BOX64-STABLE"
          tag_name: "BOX64-STABLE"
          prerelease: false
          make_latest: true
          body: |
            ðŸ¤– Automated BOX64-STABLE builds. (rolling)
            
            Current: ${{ needs.resolve-latest.outputs.base }}

  build-and-append:
    name: Build & append ${{ needs.resolve-latest.outputs.base }}
    needs: [resolve-latest, ensure-release]
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Install build tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq curl git cmake ninja-build build-essential zstd

      - name: Skip if same-version asset exists
        id: dupe
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          BASE: ${{ needs.resolve-latest.outputs.base }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          want="box64-${BASE}.wcp"

          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/BOX64-STABLE" || true)"

          if [ "$HTTP" = "200" ] && jq -e --arg W "$want" '.assets[]?.name == $W' /tmp/rel.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${want}; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout upstream Box64 at tag
        if: steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: ptitSeb/box64
          ref: ${{ needs.resolve-latest.outputs.tag }}
          submodules: recursive
          path: src

      - name: Compile Box64 (glibc)
        if: steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          cd src
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
          cmake --build build -j"$(nproc)"
          cd ..

      - name: Package Box64 WCP (lowercase filename)
        if: steps.dupe.outputs.skip != 'true'
        env:
          BASE: ${{ needs.resolve-latest.outputs.base }}
        run: |
          set -Eeuo pipefail
          DESC="Version ${BASE} Box64 build by Ari"

          mkdir -p Box64_WCP artifacts
          cp src/build/box64 Box64_WCP/box64
          chmod +x Box64_WCP/box64 || true

          # profile.json at archive root; target = ${localbin}/box64
          jq -n \
            --arg VER "${BASE}" \
            --arg DESC "${DESC}" \
            --argjson VC 0 \
            '{
              type: "Box64",
              versionName: $VER,
              versionCode: $VC,
              description: $DESC,
              files: [{ source: "box64", target: "${localbin}/box64" }]
            }' > Box64_WCP/profile.json

          (cd Box64_WCP && tar --zstd -cf "../artifacts/box64-${BASE}.wcp" profile.json box64)

      - name: Upload asset (accumulate)
        if: steps.dupe.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "BOX64-STABLE"
          files: ./artifacts/box64-${{ needs.resolve-latest.outputs.base }}.wcp
