name: VKD3D

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Check update fast
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      build: ${{ steps.decide.outputs.build }}
      tag:   ${{ steps.tag.outputs.tag }}
      base:  ${{ steps.tag.outputs.base }}
    env:
      VKD3D_REPO: HansKristian-Work/vkd3d-proton
      RELEASE_TAG: VKD3D-PROTON
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Install jq, curl (minimal)
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Resolve latest upstream version (release → tag fallback)
        id: tag
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/${{ env.VKD3D_REPO }}"
          auth=(-H "Authorization: Bearer ${{ env.GH_TOKEN }}")
          ver=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-vkd3d-proton-ci}")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "${ua[@]}" "$1"; }

          tag="$(fetch "$API/releases/latest" | jq -r 'select(.prerelease==false) | .tag_name // empty')"
          if [[ -z "$tag" ]]; then
            tag="$(fetch "$API/releases?per_page=20" | jq -r '[ .[] | select(.prerelease==false) ][0].tag_name // empty')"
          fi
          if [[ -z "$tag" ]]; then
            tag="$(git ls-remote --tags https://github.com/${{ env.VKD3D_REPO }}.git 'refs/tags/v*' \
                   | awk -F/ '{print $3}' | sed 's/\^{}//' | grep -E '^v[0-9]+' | LC_ALL=C sort -V | tail -n1)"
          fi
          [[ -z "$tag" ]] && { echo "::notice::No upstream version found; clean exit."; exit 0; }

          base="${tag#v}"
          echo "tag=$tag"  >> "$GITHUB_OUTPUT"
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "Resolved: tag=$tag base=$base"

      - name: Decide build (skip if same-version asset already uploaded)
        id: decide
        if: steps.tag.outputs.tag != ''
        env:
          REPO: ${{ github.repository }}
          BASE: ${{ steps.tag.outputs.base }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          want="vkd3d-proton-${BASE}.wcp"
          http="$(curl -sS -o /tmp/rel.json -w '%{http_code}' \
                 -H "Authorization: Bearer ${GH_TOKEN}" \
                 -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/${REPO}/releases/tags/${{ env.RELEASE_TAG }}" || true)"
          if [[ "$http" == "200" ]] && jq -e --arg W "$want" 'any(.assets[]?; .name==$W)' /tmp/rel.json >/dev/null; then
            echo "build=false" >> "$GITHUB_OUTPUT"
            echo "::notice::Found ${want} in ${RELEASE_TAG}; skipping heavy job."
          else
            echo "build=true"  >> "$GITHUB_OUTPUT"
            echo "::notice::No existing asset ${want}; will build."
          fi

# ───────────────────────────────────────────────────────────────────────────────
  build-and-release:
    name: Build & release when new
    needs: guard
    if: needs.guard.outputs.build == 'true' && needs.guard.outputs.tag != ''
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      VKD3D_REPO: HansKristian-Work/vkd3d-proton
      TOOLCHAIN_DIR: /opt/llvm-mingw
      PREFIX_X64: ${{ github.workspace }}/stage-x86_64
      PREFIX_X86: ${{ github.workspace }}/stage-i686
      RELEASE_TAG: VKD3D-PROTON
      GH_TOKEN: ${{ github.token }}
      # Pinned llvm-mingw (override via repo/Org variable LLVM_MINGW_TAG)
      LLVM_MINGW_TAG: ${{ vars.LLVM_MINGW_TAG || '20250613' }}

    steps:
      - name: Install prerequisites (meson/ninja/widl/glslang)
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            curl xz-utils jq ca-certificates git \
            build-essential pkg-config ninja-build meson \
            zstd file rsync libvulkan-dev \
            wine64-tools glslang-tools gh

      - name: Ensure glslang command is usable (--vn compat)
        run: |
          set -Eeuo pipefail
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h <(printf '#version 450\nvoid main(){}'); }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::warning::glslang not strictly required for VKD3D, but tools missing"
          fi

      - name: Download pinned llvm-mingw (UCRT; prefer 22.04 asset)
        id: llvm
        env:
          TAG: ${{ env.LLVM_MINGW_TAG }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/mstorsjo/llvm-mingw/releases/tags/${TAG}"
          json=$(curl -fsSL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" "$API" || true)

          pick_url() {
            local json="$1" url=""
            for dist in 22.04 20.04; do
              url=$(jq -r --arg dist "$dist" '
                .assets[]? | select(.name | endswith("ucrt-ubuntu-" + $dist + "-x86_64.tar.xz")) | .browser_download_url
              ' <<<"$json" | head -n1 || true)
              [[ -n "$url" && "$url" != "null" ]] && { echo "$url"; return 0; }
            done
            return 1
          }

          url="$(pick_url "$json" || true)"
          if [[ -z "${url:-}" ]]; then
            echo "::warning::Pinned ${TAG} asset not found; falling back to latest"
            json=$(curl -fsSL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" \
                   https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest || true)
            url="$(pick_url "$json" || true)"
          fi
          [[ -n "${url:-}" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }

          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL --retry 3 --retry-delay 2 -H "Authorization: Bearer $GH_TOKEN" "$url" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      - name: Verify toolchain in PATH
        run: |
          which x86_64-w64-mingw32-gcc
          x86_64-w64-mingw32-gcc --version
          which llvm-strip || true

      - name: Checkout source at resolved tag
        uses: actions/checkout@v4
        with:
          repository: ${{ env.VKD3D_REPO }}
          ref: ${{ needs.guard.outputs.tag }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Build vkd3d-proton (x64 + i686) using official cross files
        working-directory: src
        env:
          PREFIX_X64: ${{ env.PREFIX_X64 }}
          PREFIX_X86: ${{ env.PREFIX_X86 }}
        run: |
          set -Eeuo pipefail
          rm -rf "${PREFIX_X64}" "${PREFIX_X86}" build.64 build.86 "${GITHUB_WORKSPACE}/VKD3D_WCP"
          mkdir -p "${PREFIX_X64}" "${PREFIX_X86}"

          test -f meson.build || { echo "::error::Not in repository root (meson.build missing)"; exit 1; }

          # x64 → system32
          meson setup build.64 \
            --cross-file build-win64.txt \
            --buildtype release \
            -Dstrip=true \
            --prefix "${PREFIX_X64}"
          ninja -C build.64 -j"$(nproc)"
          meson install -C build.64

          # i686 → syswow64
          meson setup build.86 \
            --cross-file build-win32.txt \
            --buildtype release \
            -Dstrip=true \
            --prefix "${PREFIX_X86}"
          ninja -C build.86 -j"$(nproc)"
          meson install -C build.86

          # Collect only d3d12 / d3d12core
          mkdir -p "${GITHUB_WORKSPACE}/VKD3D_WCP/system32" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"
          copy_one() { # $1=dll, $2=prefix, $3=dest
            for src in "$2/bin/$1" "$2/lib/$1" "$2/usr/bin/$1"; do
              [[ -f "$src" ]] && cp -v "$src" "$3/" && return 0
            done
            return 1
          }
          copy_one d3d12.dll     "${PREFIX_X64}" "${GITHUB_WORKSPACE}/VKD3D_WCP/system32" || true
          copy_one d3d12core.dll "${PREFIX_X64}" "${GITHUB_WORKSPACE}/VKD3D_WCP/system32" || true
          copy_one d3d12.dll     "${PREFIX_X86}" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"  || true
          copy_one d3d12core.dll "${PREFIX_X86}" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"  || true

          if ! compgen -G "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/*.dll" >/dev/null \
             && ! compgen -G "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/*.dll" >/dev/null; then
            echo "::error::No DLLs produced (check toolchain/cross files)"; exit 1
          fi

          echo "system32 DLLs: $(ls -1 "${GITHUB_WORKSPACE}/VKD3D_WCP/system32"/*.dll 2>/dev/null | wc -l || true)"
          echo "syswow64 DLLs: $(ls -1 "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"/*.dll 2>/dev/null | wc -l || true)"

          # Reproducibility: set SOURCE_DATE_EPOCH from last commit timestamp
          export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct HEAD)"

          # Build profile.json (versionCode fixed 0; versionName includes base)
          FILES_JSON="/tmp/files.json"; jq -n '[]' > "$FILES_JSON"
          add_file() { jq --arg s "$1" --arg t "$2" '. + [{source:$s, target:$t}]' "$FILES_JSON" > /tmp/.j && mv /tmp/.j "$FILES_JSON"; }
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/d3d12.dll"     ]] && add_file "system32/d3d12.dll"     '${system32}/d3d12.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/d3d12core.dll" ]] && add_file "system32/d3d12core.dll" '${system32}/d3d12core.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/d3d12.dll"     ]] && add_file "syswow64/d3d12.dll"     '${syswow64}/d3d12.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/d3d12core.dll" ]] && add_file "syswow64/d3d12core.dll" '${syswow64}/d3d12core.dll'

          jq -n \
            --arg VN "proton-${{ needs.guard.outputs.base }}" \
            --argjson VC 0 \
            --arg DESC "VKD3D-Proton build by Ari" \
            --slurpfile F "$FILES_JSON" \
            '{type:"VKD3D", versionName:$VN, versionCode:$VC, description:$DESC, files:($F[0]//[])}' \
            > "${GITHUB_WORKSPACE}/VKD3D_WCP/profile.json"

          tar -C "${GITHUB_WORKSPACE}/VKD3D_WCP" --zstd \
              --format=gnu --owner=0 --group=0 --numeric-owner \
              --sort=name \
              -cf "${GITHUB_WORKSPACE}/vkd3d-proton-${{ needs.guard.outputs.base }}.wcp" \
              profile.json system32 syswow64

      - name: Ensure release (fixed tag; keep “Current” up to date)
        env:
          REPO: ${{ github.repository }}
          BASE: ${{ needs.guard.outputs.base }}
        run: |
          set -Eeuo pipefail
          BODY=$'🤖 Automated Proton builds (2.14.1+)\n\nCurrent: '"${BASE}"
          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -n "${BODY}"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -n "${BODY}"
          fi

      - name: Upload asset (versioned; clobber same name)
        env:
          REPO: ${{ github.repository }}
        run: |
          gh release upload "${RELEASE_TAG}" \
            "${GITHUB_WORKSPACE}/vkd3d-proton-${{ needs.guard.outputs.base }}.wcp" \
            --repo "${REPO}" --clobber
