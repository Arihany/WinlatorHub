name: Build FEX Nightly

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

jobs:
  resolve-latest:
    name: Resolve upstream HEAD (commit)
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.upstream.outputs.branch }}
      sha: ${{ steps.upstream.outputs.sha }}
      short: ${{ steps.upstream.outputs.short }}
      datecode: ${{ steps.datecode.outputs.code }}
    steps:
      - name: Resolve upstream FEX HEAD SHA (robust)
        id: upstream
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          # Resolve latest commit SHA on default branch via GitHub API
          API="https://api.github.com"
          OWNER="FEX-Emu"
          REPO="FEX"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-fexcore-nightly-workflow}")
          ver=(-H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ua[@]}" "${ver[@]}" "$1"; }

          branch="$(fetch "$API/repos/$OWNER/$REPO" | jq -r .default_branch)"
          [[ -z "$branch" || "$branch" == "null" ]] && branch="main"

          sha="$(fetch "$API/repos/$OWNER/$REPO/commits/${branch}" | jq -r .sha)"
          [[ -z "$sha" || "$sha" == "null" ]] && { echo "::error::Failed to resolve upstream HEAD SHA"; exit 1; }

          short="$(printf '%s' "$sha" | cut -c1-7)"

          echo "branch=${branch}" >> "$GITHUB_OUTPUT"
          echo "sha=${sha}"       >> "$GITHUB_OUTPUT"
          echo "short=${short}"   >> "$GITHUB_OUTPUT"
          echo "Upstream ${branch} @ ${short}"

      - name: Decide date code (YYMMDD, KST)
        id: datecode
        run: echo "code=$(TZ=Asia/Seoul date +%y%m%d)" >> "$GITHUB_OUTPUT"

  compile-fexcore:
    name: Build & append ${{ needs.resolve-latest.outputs.short }}
    needs: [resolve-latest]
    runs-on: ubuntu-24.04-arm

    steps:
      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y jq zstd curl wget git cmake ninja-build build-essential gh

      # Skip if same-date asset already exists (lowercase filename)
      - name: Skip if same-date asset exists
        id: dupe
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          filename="fex-nightly-${DATECODE}.wcp"

          HTTP="$(curl -s -o /tmp/nightly.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/FEX-NIGHTLY" || true)"

          if [ "$HTTP" = "200" ] && jq -e --arg N "$filename" '.assets[]?.name == $N' /tmp/nightly.json >/dev/null; then
            echo "skip=true"  >> "$GITHUB_OUTPUT"
            echo "Found asset ${filename} in release FEX-NIGHTLY; skipping build."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Checkout upstream FEX (exact commit)
        if: steps.dupe.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: FEX-Emu/FEX
          ref: ${{ needs.resolve-latest.outputs.sha }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Compile FEXCore
        if: steps.dupe.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          # Build arm64ec
          mkdir -p src/build/arm64ec && cd src/build/arm64ec
          ../../Data/nix/cmake_configure_woa64.sh ../../ -G Ninja -DTUNE_CPU=none
          ninja
          cd ../../..
          # Build wow64
          mkdir -p src/build/wow64 && cd src/build/wow64
          ../../Data/nix/cmake_configure_woa32.sh ../../ -G Ninja -DTUNE_CPU=none
          ninja
          cd ../../..

      - name: Package Nightly WCP (lowercase filename)
        if: steps.dupe.outputs.skip != 'true'
        env:
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          mkdir -p FEXCore_DLLs FEXCore_WCP/system32

          # Collect DLLs (all placed under system32 per schema)
          cp ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_DLLs/
          cp ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_DLLs/
          cp ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_WCP/system32/
          cp ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_WCP/system32/

          cd FEXCore_WCP

          # Build files list → JSON array
          (find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/files.txt
          if [[ ! -s /tmp/files.txt ]]; then
            echo "::error::No DLLs found under FEXCore_WCP/system32"; exit 1
          fi
          jq -Rn '[inputs | {source: ("system32/"+.), target: ("${system32}/"+.)}]' \
            < /tmp/files.txt > /tmp/files.json

          DESC="${DATECODE} FEXCore build by Ari"
          jq -n \
            --argjson VC "${DATECODE}" \
            --arg DESC "$DESC" \
            --slurpfile F /tmp/files.json \
            '{
              type: "FEXCore",
              versionName: "nightly",
              versionCode: $VC,
              description: $DESC,
              files: ($F[0] // [])
            }' > profile.json

          # Package (lowercase)
          tar --zstd -cf "fex-nightly-${DATECODE}.wcp" profile.json system32
          mv "fex-nightly-${DATECODE}.wcp" ../FEXCore_DLLs
          cd ..

      - name: Upload packaged artifact
        if: steps.dupe.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fex-nightly-${{ needs.resolve-latest.outputs.datecode }}
          path: ./FEXCore_DLLs/fex-nightly-${{ needs.resolve-latest.outputs.datecode }}.wcp
          if-no-files-found: error
          retention-days: 7

      - name: Ensure/Update release (tag = FEX-NIGHTLY) and upload asset
        if: steps.dupe.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}                 # ← add this
          SHORT:    ${{ needs.resolve-latest.outputs.short }}
          SHA:      ${{ needs.resolve-latest.outputs.sha }}
          DATECODE: ${{ needs.resolve-latest.outputs.datecode }}
        run: |
          set -Eeuo pipefail
          BODY=$'🌙 Automated FEX-NIGHTLY builds (rolling)\n\nCommit: ['"${SHORT}"'](https://github.com/FEX-Emu/FEX/commit/'"${SHA}"')'
      
          # Use explicit --repo to avoid relying on .git presence
          if ! gh release view "FEX-NIGHTLY" --repo "$REPO" >/dev/null 2>&1; then
            gh release create "FEX-NIGHTLY" --repo "$REPO" -t "FEX-NIGHTLY" -n "${BODY}"
          else
            gh release edit   "FEX-NIGHTLY" --repo "$REPO" -t "FEX-NIGHTLY" -n "${BODY}"
          fi
      
          # Upload asset (lowercase filename), accumulate versions
          gh release upload "FEX-NIGHTLY" \
            "./FEXCore_DLLs/fex-nightly-${DATECODE}.wcp" \
            --repo "$REPO" --clobber
