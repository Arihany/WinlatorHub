name: Build Turnip Driver (freedreno-latest, on-demand)

on:
  workflow_dispatch:
    inputs:
      ndk_pkg:
        description: "Android NDK package dir (exact name on dl.google.com)"
        default: "android-ndk-r29-beta3"
        required: true
      api_level:
        description: "Android platform SDK level (minApi in meta.json)"
        default: "34"
        required: true

permissions:
  contents: write
  actions: write   # repo variable 업데이트용

defaults:
  run:
    shell: bash -Eeuo pipefail {0}

env:
  GITLAB_API: https://gitlab.freedesktop.org/api/v4
  MESA_PATH: mesa/mesa

jobs:
  guard-freedreno:
    name: Detect latest freedreno commit
    runs-on: ubuntu-24.04
    outputs:
      changed:    ${{ steps.decide.outputs.changed }}
      free_sha:   ${{ steps.free.outputs.sha }}
      free_short: ${{ steps.free.outputs.short }}
      prev_sha:   ${{ steps.prev.outputs.prev }}
    steps:
      - name: Install gh & jq
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends gh jq curl ca-certificates

      - name: Read previously built freedreno SHA (repo variable)
        id: prev
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
        run: |
          set -Eeuo pipefail
          prev="$(gh variable get MESA_LAST_FREEDRENO_SHA -R "$REPO" -q .value 2>/dev/null || true)"
          echo "Previous freedreno SHA: ${prev:-<none>}"
          echo "prev=${prev}" >> "$GITHUB_OUTPUT"

      - name: Resolve latest commit touching src/freedreno/**
        id: free
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }} # 선택(없어도 OK, 레이트리밋 완화)
        run: |
          set -Eeuo pipefail
          UA="gha-turnip/${GITHUB_RUN_ID:-0} (+https://github.com/${GITHUB_REPOSITORY})"
          PROJ_ENC="${MESA_PATH//\//%2F}"
          HDR=(-A "$UA" -H "Accept: application/json")
          [ -n "${GITLAB_TOKEN:-}" ] && HDR+=(-H "PRIVATE-TOKEN: ${GITLAB_TOKEN}")
          # 최신 main에서 freedreno 경로에 영향 준 커밋 1개만
          url="${GITLAB_API}/projects/${PROJ_ENC}/repository/commits?ref_name=main&per_page=1&path=src%2Ffreedreno"
          json="$(curl -fsSL "${HDR[@]}" "$url")"
          sha="$(echo "$json" | jq -r '.[0].id')"
          [ -n "$sha" ] || { echo "::error::Failed to resolve freedreno latest commit"; exit 1; }
          echo "sha=$sha"          >> "$GITHUB_OUTPUT"
          echo "short=${sha:0:9}"  >> "$GITHUB_OUTPUT"
          echo "Latest freedreno SHA: $sha"

      - name: Decide build (prev != freedreno latest)
        id: decide
        run: |
          set -Eeuo pipefail
          prev="${{ steps.prev.outputs.prev }}"
          head="${{ steps.free.outputs.sha }}"
          if [ -z "$prev" ] || [ "$prev" != "$head" ]; then
            echo "changed=true"  >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build & Package Turnip (Android aarch64)
    needs: guard-freedreno
    if: needs.guard-freedreno.outputs.changed == 'true'
    runs-on: ubuntu-24.04
    env:
      # Inputs
      NDK_PKG:   ${{ inputs.ndk_pkg }}
      API_LEVEL: ${{ inputs.api_level }}
      FREE_SHA:  ${{ needs.guard-freedreno.outputs.free_sha }}
      # Work
      WORKDIR:   ${{ github.workspace }}/turnip_workdir
      META_FILE: meta.json
      DRIVER_FILE: vulkan.turnip.so
      NDK_URL: https://dl.google.com/android/repository/${{ inputs.ndk_pkg }}-linux.zip
    steps:
      - name: Checkout (for versioning only)
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            build-essential ninja-build ccache clang lld llvm git \
            patchelf unzip curl xz-utils ca-certificates \
            python3 python3-pip python3-mako \
            flex bison zip jq glslang-tools vulkan-tools gh

      - name: Install Meson >= 1.4 via pip (user)
        run: |
          python3 -m pip install --upgrade --user pip
          python3 -m pip install --upgrade --user 'meson>=1.4,<2'
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          meson --version

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ env.NDK_PKG }}-api${{ env.API_LEVEL }}-${{ needs.guard-freedreno.outputs.free_short }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Configure ccache
        run: |
          mkdir -p "$HOME/.cache/ccache"
          {
            echo "CCACHE_DIR=$HOME/.cache/ccache"
            echo "CCACHE_MAXSIZE=2G"
            echo "CCACHE_COMPILERCHECK=content"
          } >> "$GITHUB_ENV"

      - name: Prepare workdir
        run: |
          rm -rf "$WORKDIR"
          mkdir -p "$WORKDIR/src" "$WORKDIR/out"

      - name: Sanitize pkg-config for cross
        run: |
          {
            echo "PKG_CONFIG=/bin/false"
            echo "PKG_CONFIG_PATH="
            echo "PKG_CONFIG_LIBDIR="
          } >> "$GITHUB_ENV"

      - name: Download Android NDK
        working-directory: ${{ env.WORKDIR }}
        run: |
          echo "NDK_URL=$NDK_URL"
          curl -fL --retry 3 --retry-delay 2 -o "${NDK_PKG}.zip" "$NDK_URL"
          unzip -q "${NDK_PKG}.zip"

      - name: Download Mesa (archive at freedreno commit)
        working-directory: ${{ env.WORKDIR }}/src
        run: |
          PROJ_LAST="${MESA_PATH##*/}"  # "mesa"
          ARCH_URL="https://gitlab.freedesktop.org/${MESA_PATH}/-/archive/${FREE_SHA}/${PROJ_LAST}-${FREE_SHA}.tar.gz"
          echo "ARCH_URL=$ARCH_URL"
          curl -fL --retry 3 --retry-delay 2 -o "${PROJ_LAST}-${FREE_SHA}.tar.gz" "$ARCH_URL"
          tar -xzf "${PROJ_LAST}-${FREE_SHA}.tar.gz"
          echo "Extracted:"; ls -1d ${PROJ_LAST}-* || true

      - name: Locate extracted Mesa dir
        id: mesadir
        working-directory: ${{ env.WORKDIR }}/src
        run: |
          PROJ_LAST="${MESA_PATH##*/}"
          d="${PROJ_LAST}-${FREE_SHA}"
          [ -d "$d" ] || d="$(ls -1d ${PROJ_LAST}-* | head -n1)"
          echo "dir=$d"
          echo "dir=$d" >> "$GITHUB_OUTPUT"

      - name: Configure toolchain & cross files (Android aarch64)
        working-directory: ${{ env.WORKDIR }}
        run: |
          NDK_BIN="$WORKDIR/${NDK_PKG}/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "Using NDK bin: $NDK_BIN"

          export CC=clang
          export CXX=clang++
          export AR=llvm-ar
          export RANLIB=llvm-ranlib
          export STRIP=llvm-strip
          export OBJDUMP=llvm-objdump
          export OBJCOPY=llvm-objcopy
          export LDFLAGS="-fuse-ld=lld"
          export PATH="$NDK_BIN:$PATH"

          cat > android-aarch64.txt <<'EOF'
          [binaries]
          ar = '@NDK_BIN@/llvm-ar'
          c = ['ccache', '@NDK_BIN@/aarch64-linux-android@API_LEVEL@-clang']
          cpp = ['ccache', '@NDK_BIN@/aarch64-linux-android@API_LEVEL@-clang++']
          c_ld = '@NDK_BIN@/ld.lld'
          cpp_ld = '@NDK_BIN@/ld.lld'
          strip = '@NDK_BIN@/llvm-strip'
          pkg-config = '/bin/false'

          [host_machine]
          system = 'android'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          sed -i "s|@NDK_BIN@|$NDK_BIN|g; s|@API_LEVEL@|${API_LEVEL}|g" android-aarch64.txt

          cat > native.txt <<'EOF'
          [build_machine]
          c = ['ccache', 'clang']
          cpp = ['ccache', 'clang++']
          ar = 'llvm-ar'
          strip = 'llvm-strip'
          c_ld = 'ld.lld'
          cpp_ld = 'ld.lld'
          system = 'linux'
          cpu_family = 'x86_64'
          cpu = 'x86_64'
          endian = 'little'
          EOF

      - name: Configure Meson (Android/Turnip, ThinLTO)
        working-directory: ${{ env.WORKDIR }}
        env:
          MESA_ALLOW_WARNINGS: "1"
          CI: ""
        run: |
          MESA_SRC="$WORKDIR/src/${{ steps.mesadir.outputs.dir }}"
          [ -d "$MESA_SRC" ] || { echo "No such dir: $MESA_SRC"; exit 1; }

          meson setup build-android-aarch64 "$MESA_SRC" \
            --cross-file "$WORKDIR/android-aarch64.txt" \
            --native-file "$WORKDIR/native.txt" \
            --buildtype=release \
            -Dstrip=true \
            -Db_lto=true \
            -Db_lto_mode=thin \
            -Dplatforms=android \
            -Dplatform-sdk-version="${API_LEVEL}" \
            -Dandroid-stub=true \
            -Degl=disabled \
            -Dgallium-drivers= \
            -Dvulkan-drivers=freedreno \
            -Dfreedreno-kmds=kgsl \
            -Dlibarchive:openssl=disabled \
            --force-fallback-for=libarchive \
            -Dwerror=false

      - name: Build (ninja)
        working-directory: ${{ env.WORKDIR }}
        run: |
          ninja -C build-android-aarch64 -j"$(nproc)"

      - name: Collect artifact & build meta.json
        id: artifact
        working-directory: ${{ env.WORKDIR }}
        run: |
          OUT_SO="build-android-aarch64/src/freedreno/vulkan/libvulkan_freedreno.so"
          test -f "$OUT_SO" || { echo "Build artifact not found: $OUT_SO"; exit 1; }

          cp "$OUT_SO" "$DRIVER_FILE"
          SHORT="${{ needs.guard-freedreno.outputs.free_short }}"

          # Vulkan header version (for meta)
          MESA_SRC="$WORKDIR/src/${{ steps.mesadir.outputs.dir }}"
          HDR_FILE="$(find "$MESA_SRC" -type f -path '*/include/vulkan/vulkan_core.h' | head -n1 || true)"
          if [ -n "$HDR_FILE" ]; then
            HDR_NUM="$(grep -E '^[[:space:]]*#define[[:space:]]+VK_HEADER_VERSION[[:space:]]+[0-9]+' "$HDR_FILE" | awk '{print $3}' | head -n1)"
          fi
          if [ -z "${HDR_NUM:-}" ]; then
            HDR_FILE2="$(find "$MESA_SRC" -type f -path '*/subprojects/*/include/vulkan/vulkan_core.h' | head -n1 || true)"
            [ -n "$HDR_FILE2" ] && HDR_NUM="$(grep -E '^[[:space:]]*#define[[:space:]]+VK_HEADER_VERSION[[:space:]]+[0-9]+' "$HDR_FILE2" | awk '{print $3}' | head -n1)"
          fi
          VK_VER="1.4.${HDR_NUM:-unknown}"

          cat > "$META_FILE" <<JSON
          {
            "schemaVersion": 1,
            "name": "Turnip Driver nightly (${SHORT})",
            "description": "Turnip (freedreno) Vulkan driver built from Mesa main @ ${SHORT} (freedreno latest)",
            "author": "Ari",
            "packageVersion": "1",
            "vendor": "Mesa",
            "driverVersion": "Vulkan ${VK_VER}",
            "minApi": ${API_LEVEL},
            "libraryName": "${DRIVER_FILE}"
          }
          JSON

          OUT_ZIP="Turnip-nightly-freedreno-${SHORT}.zip"
          zip -q "$OUT_ZIP" "$DRIVER_FILE" "$META_FILE"
          echo "outzip=$WORKDIR/$OUT_ZIP" >> "$GITHUB_OUTPUT"

      - name: Upload artifact (zip)
        uses: actions/upload-artifact@v4
        with:
          name: Turnip-nightly-freedreno-${{ needs.guard-freedreno.outputs.free_short }}
          path: ${{ steps.artifact.outputs.outzip }}
          if-no-files-found: error
          retention-days: 14

      - name: Persist latest freedreno SHA
        env:
          GH_TOKEN: ${{ github.token }}
          REPO:     ${{ github.repository }}
        run: |
          gh variable set MESA_LAST_FREEDRENO_SHA -R "$REPO" -b "${FREE_SHA}"
