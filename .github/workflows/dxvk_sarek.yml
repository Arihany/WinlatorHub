name: Build DXVK-Sarek

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  build-and-release:
    runs-on: ubuntu-24.04
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      PREFIX_X64: ${{ github.workspace }}/dist-x64
      PREFIX_X86: ${{ github.workspace }}/dist-x86
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: DXVK-SAREK
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: "Install host tooling"
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd ccache file rsync

      - name: "Ensure glslang (--vn) available"
        run: |
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: "Install gh CLI"
        run: |
          if ! command -v gh >/dev/null 2>&1; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
            sudo apt-get update -y
            sudo apt-get install -y gh
          fi

      - name: "Resolve llvm-mingw (ucrt, ubuntu x86_64)"
        id: llvm
        run: |
          json=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest)
          url=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .browser_download_url' | head -n1)
          name=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .name' | head -n1)
          [[ -n "$url" && -n "$name" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }
          echo "url=$url"  >> "$GITHUB_OUTPUT"
          echo "name=$name" >> "$GITHUB_OUTPUT"

      - name: "Cache llvm-mingw (extracted)"
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ env.TOOLCHAIN_DIR }}
          key: llvm-mingw-${{ steps.llvm.outputs.name }}

      - name: "Fetch llvm-mingw (if cache miss)"
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL -H "Authorization: Bearer $GH_TOKEN" "${{ steps.llvm.outputs.url }}" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz

      - name: "Add toolchain to PATH"
        run: echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      - name: "Cache ccache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ runner.arch }}-dxvk-sarek
          restore-keys: |
            ccache-${{ runner.os }}-${{ runner.arch }}-

      - name: "Configure ccache"
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV

      - name: "Clone DXVK-Sarek (main + submodules)"
        run: |
          git clone --recurse-submodules https://github.com/${SAREK_REPO}.git src
          cd src
          git fetch --tags --force

      - name: "Resolve Sarek tags (v1.10.8 → latest) & compute NEW to build"
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          cd src
          git tag -l 'v*' \
            | sort -V \
            | awk '
                function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                  for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
                {ver=substr($0,2); if (cmp(ver,"1.10.8")>=0) print $0}
              ' > "${GITHUB_WORKSPACE}/versions.txt"

          : > "${GITHUB_WORKSPACE}/to_build.txt"

          EXIST="/tmp/exist.txt"; : > "$EXIST"
          if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh api repos/"${REPO}"/releases/tags/"${RELEASE_TAG}" \
              | jq -r '.assets[].name' \
              | sed -n -E 's/^dxvk-sarek-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > "$EXIST" || true
          fi

          while IFS= read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#v}"
            if ! grep -Fxq "$base" "$EXIST"; then
              echo "$tag $base" >> "${GITHUB_WORKSPACE}/to_build.txt"
            fi
          done < "${GITHUB_WORKSPACE}/versions.txt"

          echo "Candidates:";       cat "${GITHUB_WORKSPACE}/versions.txt" || true
          echo "Already uploaded:"; cat "$EXIST" || true
          echo "To build:";         cat "${GITHUB_WORKSPACE}/to_build.txt" || true

      - name: "Build NEW versions only (DXVK-Sarek → WCP) + compat patches + clean retag"
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          LIST="${GITHUB_WORKSPACE}/to_build.txt"
          if [[ ! -f "$LIST" || ! -s "$LIST" ]]; then
            echo "No new versions to build."; exit 0; fi

          while read -r tag base; do
            echo "::group::Build ${tag} (dxvk-sarek)"
            git checkout -f "$tag"
            git submodule update --init --recursive --checkout

            hdr="src/d3d9/d3d9_include.h"
            if [[ -f "$hdr" ]]; then
              for sym in _D3DDEVINFO_RESOURCEMANAGER _D3DDEVINFO_D3D9PIPELINETIMINGS _D3DDEVINFO_VCACHE _D3DDEVINFO_PRIVATEDATA _D3DDEVINFO_VERTEXSTATS; do
                if grep -q "typedef struct ${sym}" "$hdr"; then
                  awk -v pat="typedef struct ${sym}" 'BEGIN{drop=0}
                    index($0, pat){drop=1; next}
                    drop==1 && /\}[[:space:]]*[^;]*;[[:space:]]*$/ {drop=0; next}
                    drop==0 {print}' "$hdr" > "$hdr.new" && mv "$hdr.new" "$hdr"
                fi
              done
            fi

            hdr2="src/d3d11/d3d11_texture.h"
            if [[ -f "$hdr2" ]] && grep -qE 'constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource' "$hdr2"; then
              sed -i -E 's/static[[:space:]]+constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource[[:space:]]*=[[:space:]]*D3D11_MAP\(-1u\);/inline static const D3D11_MAP UnmappedSubresource = (D3D11_MAP)0xFFFFFFFFu;/' "$hdr2" || true
            fi

            git config user.name  "ci"
            git config user.email "ci@local"
            git config --global --add safe.directory "$(pwd)"
            git add -A
            git commit -m "local compat patches for ${base}" || true
            git tag -d "$tag" || true
            git tag -a "$tag" -m "clean retag for HUD version"
            git reset --hard HEAD
            git clean -xdf
            if [[ -n "$(git status --porcelain)" ]]; then
              echo "::error::Repo is dirty after retag"; git status; exit 1
            fi

            # ---- Clean previous artifacts ------------------------------------
            rm -rf "${GITHUB_WORKSPACE}/build.w64" "${GITHUB_WORKSPACE}/build.w32" \
                   "${GITHUB_WORKSPACE}/dist-x64"  "${GITHUB_WORKSPACE}/dist-x86" \
                   "${GITHUB_WORKSPACE}/DXVK_WCP"

            # 64-bit
            meson setup "${GITHUB_WORKSPACE}/build.w64" \
              --cross-file build-win64.txt \
              --buildtype release \
              --prefix "${PREFIX_X64}" \
              -Dbuild_id=false -Dstrip=true \
              -Dc_args='-Wno-nontrivial-memcall' \
              -Dcpp_args='-Wno-nontrivial-memcall'
            ninja -C "${GITHUB_WORKSPACE}/build.w64" -j"$(nproc)"
            echo "::group::Install x64"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.w64"
            echo "::endgroup::"

            # 32-bit
            meson setup "${GITHUB_WORKSPACE}/build.w32" \
              --cross-file build-win32.txt \
              --buildtype release \
              --prefix "${PREFIX_X86}" \
              -Dbuild_id=false -Dstrip=true \
              -Dc_args='-Wno-nontrivial-memcall' \
              -Dcpp_args='-Wno-nontrivial-memcall'
            ninja -C "${GITHUB_WORKSPACE}/build.w32" -j"$(nproc)"
            echo "::group::Install x86"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.w32"
            echo "::endgroup::"

            # Layout WCP (64→system32, 32→syswow64)
            mkdir -p "${GITHUB_WORKSPACE}/DXVK_WCP/system32" "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64"
            cp -v "${PREFIX_X64}/bin/"*.dll  "${GITHUB_WORKSPACE}/DXVK_WCP/system32/" || true
            cp -v "${PREFIX_X86}/bin/"*.dll "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64/" || true

            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x64.txt || true
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find syswow64 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x86.txt || true
            if [[ ! -s /tmp/x64.txt && ! -s /tmp/x86.txt ]]; then
              echo "::error::No DLLs discovered for ${base}"; exit 1; fi

            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x64.txt  > /tmp/x64.json
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x86.txt  > /tmp/x86.json

            VN="sarek-${base}"
            jq -n \
              --arg VN "${VN}" \
              --argjson VC 0 \
              --arg DESC "DXVK-Sarek build by Ari" \
              --arg SYS '${system32}/' \
              --arg WOW '${syswow64}/' \
              --slurpfile x64 /tmp/x64.json \
              --slurpfile x86 /tmp/x86.json \
              '
              ($x64[0] // []) as $A |
              ($x86[0] // []) as $B |
              {
                type: "DXVK",
                versionName: $VN,
                versionCode: $VC,
                description: $DESC,
                files: [
                  ($A[]? | {source: ("system32/"+.), target: ($SYS + .)}),
                  ($B[]? | {source: ("syswow64/"+.), target: ($WOW + .)})
                ]
              }' > "${GITHUB_WORKSPACE}/DXVK_WCP/profile.json"

            mkdir -p "${GITHUB_WORKSPACE}/out"
            wcp="dxvk-sarek-${base}.wcp"
            tar -C "${GITHUB_WORKSPACE}/DXVK_WCP" --zstd \
                --format=gnu --owner=0 --group=0 --numeric-owner \
                -cf "${GITHUB_WORKSPACE}/out/${wcp}" profile.json system32 syswow64
            echo "::endgroup::"
          done < "$LIST"

      - name: "Build release notes (with Current)"
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          # Always reset body header only
          printf '🤖 Automated DXVK-Sarek builds (1.10.8+).\n\n' > "$NOTES"
          cat "$NOTES"

      - name: "Create/Update GitHub Release (DXVK-SAREK) + upload new WCPs"
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="${RELEASE_TAG}"

          # Rebuild body header
          printf '🤖 Automated DXVK-Sarek builds (1.10.8+).\n\n' > "$NOTES"

          # Compute Current only for release body
          cur=""
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-sarek-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-sarek-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            cur="${latest#dxvk-sarek-}"; cur="${cur%.wcp}"
          else
            if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
              assets_json="$(gh api repos/${REPO}/releases/tags/${RELEASE_TAG})"
              mapfile -t list < <(
                echo "$assets_json" \
                | jq -r '.assets[].name' \
                | grep -E '^dxvk-sarek-.*\.wcp$' \
                | LC_ALL=C sort -V
              )
              if ((${#list[@]} > 0)); then
                latest="${list[-1]}"
                cur="${latest#dxvk-sarek-}"; cur="${cur%.wcp}"
              fi
            fi
          fi

          [[ -n "$cur" ]] && echo "Current: ${cur}" >> "$NOTES"

          # Create or update release
          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          # Upload new artifacts if any
          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
