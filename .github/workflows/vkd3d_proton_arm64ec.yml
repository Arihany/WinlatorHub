name: Build VKD3D arm64ec v2

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Check Update (VKD3D)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    outputs:
      build: ${{ steps.decide.outputs.build }}
      tag:   ${{ steps.upstream.outputs.tag }}
      base:  ${{ steps.upstream.outputs.base }}
    env:
      GH_TOKEN:    ${{ github.token }}
      REPO:        ${{ github.repository }}
      RELEASE_TAG: VKD3D-PROTON-ARM64EC
      VKD3D_REPO:  HansKristian-Work/vkd3d-proton
    steps:
      - name: Install jq, curl (minimal)
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Resolve latest upstream version (release â†’ tag)
        id: upstream
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/${VKD3D_REPO}"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-vkd3d-proton-arm64ec-workflow}")
          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "${ua[@]}" "$1"; }

          tag="$(fetch "$API/releases/latest" | jq -r 'select(.prerelease==false) | .tag_name // empty')"
          if [[ -z "$tag" ]]; then
            tag="$(fetch "$API/releases?per_page=20" | jq -r '[ .[] | select(.prerelease==false) ][0].tag_name // empty')"
          fi
          if [[ -z "$tag" ]]; then
            tag="$(git ls-remote --tags https://github.com/${VKD3D_REPO}.git 'refs/tags/v*' \
                   | awk -F/ '{print $3}' | sed 's/\^{}//' | grep -E '^v[0-9]+' | LC_ALL=C sort -V | tail -n1)"
          fi
          [[ -z "$tag" ]] && { echo "::notice::No upstream version found; exit clean."; exit 0; }
          base="${tag#v}"
          echo "tag=$tag"   >> "$GITHUB_OUTPUT"
          echo "base=$base" >> "$GITHUB_OUTPUT"
          echo "Resolved: tag=$tag base=$base"

      - name: Check existing asset in local release
        id: local
        if: steps.upstream.outputs.tag != ''
        run: |
          set -Eeuo pipefail
          WANT="vkd3d-proton-arm64ec-${{ steps.upstream.outputs.base }}.wcp"
          API="https://api.github.com/repos/${REPO}/releases/tags/${RELEASE_TAG}"
          HTTP="$(curl -sS -o /tmp/rel.json -w '%{http_code}' \
                 -H "Authorization: Bearer ${GH_TOKEN}" \
                 -H "Accept: application/vnd.github+json" "$API" || true)"
          if [[ "$HTTP" == "200" ]] && jq -e --arg W "$WANT" 'any(.assets[]?; .name==$W)' /tmp/rel.json >/dev/null; then
            echo "has=true"  >> "$GITHUB_OUTPUT"
            echo "::notice::Found ${WANT} in ${RELEASE_TAG}; skipping build."
          else
            echo "has=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Decide build
        id: decide
        run: |
          set -Eeuo pipefail
          if [[ -z "${{ steps.upstream.outputs.tag }}" ]]; then
            echo "build=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          if [[ "${{ steps.local.outputs.has }}" == "true" ]]; then
            echo "build=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          echo "build=true" >> "$GITHUB_OUTPUT"

  build-and-release:
    name: Build & release (arm64ec)
    needs: guard
    if: needs.guard.outputs.build == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 120
    permissions:
      contents: write
    env:
      VKD3D_REPO:    HansKristian-Work/vkd3d-proton
      TOOLCHAIN_DIR: /opt/llvm-mingw
      PREFIX_EC:     ${{ github.workspace }}/stage-arm64ec
      PREFIX_X86:    ${{ github.workspace }}/stage-i686
      RELEASE_TAG:   VKD3D-PROTON-ARM64EC
      GH_TOKEN:      ${{ github.token }}
      TAG:           ${{ needs.guard.outputs.tag }}
      BASE:          ${{ needs.guard.outputs.base }}

    steps:
      - name: Install build prerequisites (lean)
        run: |
          set -Eeuo pipefail
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            curl xz-utils jq ca-certificates git \
            build-essential pkg-config ninja-build meson \
            zstd file rsync \
            glslang-tools gh

      - name: Ensure glslang (--vn)
        run: |
          set -Eeuo pipefail
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Download pinned llvm-mingw (bylaws 20250305, UCRT, Ubuntu 20.04 x86_64)
        run: |
          set -Eeuo pipefail
          URL="https://github.com/bylaws/llvm-mingw/releases/download/20250305/llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64.tar.xz"
          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL --retry 3 --retry-delay 2 "$URL" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"
          export PATH="$TOOLCHAIN_DIR/bin:$PATH"

      - name: Verify toolchain in PATH
        run: |
          set -Eeuo pipefail
          which arm64ec-w64-mingw32-clang
          arm64ec-w64-mingw32-clang --version
          which i686-w64-mingw32-clang
          which arm64ec-w64-mingw32-ar

      - name: Create Meson cross files (arm64ec / i686)
        run: |
          set -Eeuo pipefail
          # arm64ec cross file (clang toolchain, llvm-strip)
          cat > "${{ github.workspace }}/arm64ec.cross" <<'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = 'arm64ec-w64-mingw32-clang'
          cpp = 'arm64ec-w64-mingw32-clang++'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'llvm-strip'
          widl = 'arm64ec-w64-mingw32-widl'
          pkgconfig = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          [properties]
          needs_exe_wrapper = true
          EOF

          # 32-bit i686 cross file (WOW64 side)
          cat > "${{ github.workspace }}/i686.cross" <<'EOF'
          [binaries]
          ar = 'i686-w64-mingw32-ar'
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          windres = 'i686-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkgconfig = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          [properties]
          needs_exe_wrapper = true
          EOF

          # Fallbacks if some binaries are missing
          for f in arm64ec i686; do
            command -v ${f}-w64-mingw32-windres >/dev/null || sed -i "s/^windres.*/windres = 'llvm-rc'/" "${{ github.workspace }}/$f.cross"
            command -v ${f}-w64-mingw32-widl    >/dev/null || sed -i "s/^widl.*/widl = 'widl'/" "${{ github.workspace }}/$f.cross"
          done

      - name: Checkout source at tag
        uses: actions/checkout@v4
        with:
          repository: ${{ env.VKD3D_REPO }}
          ref: ${{ env.TAG }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Build vkd3d-proton (arm64ec + i686)
        working-directory: src
        run: |
          set -Eeuo pipefail
          export PATH="${TOOLCHAIN_DIR}/bin:${PATH}"

          rm -rf "${PREFIX_EC}" "${PREFIX_X86}" build.ec build.x86 "${GITHUB_WORKSPACE}/VKD3D_WCP"
          mkdir -p "${PREFIX_EC}" "${PREFIX_X86}"

          test -f meson.build || { echo "::error::Not in repository root (meson.build missing)"; exit 1; }

          meson setup build.ec \
            --cross-file "${GITHUB_WORKSPACE}/arm64ec.cross" \
            --buildtype release \
            -Dstrip=true \
            --prefix "${PREFIX_EC}"
          ninja -C build.ec -j"$(nproc)"
          meson install -C build.ec

          meson setup build.x86 \
            --cross-file "${GITHUB_WORKSPACE}/i686.cross" \
            --buildtype release \
            -Dstrip=true \
            --prefix "${PREFIX_X86}"
          ninja -C build.x86 -j"$(nproc)"
          meson install -C build.x86

          mkdir -p "${GITHUB_WORKSPACE}/VKD3D_WCP/system32" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"

          copy_one() { # $1=dll, $2=prefix, $3=dest
            for p in "$2/bin/$1" "$2/lib/$1" "$2/usr/bin/$1"; do
              [[ -f "$p" ]] && cp -v "$p" "$3/" && return 0
            done
            return 1
          }
          copy_one d3d12.dll     "${PREFIX_EC}"  "${GITHUB_WORKSPACE}/VKD3D_WCP/system32"  || true
          copy_one d3d12core.dll "${PREFIX_EC}"  "${GITHUB_WORKSPACE}/VKD3D_WCP/system32"  || true
          copy_one d3d12.dll     "${PREFIX_X86}" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"  || true
          copy_one d3d12core.dll "${PREFIX_X86}" "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"  || true

          if ! compgen -G "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/*.dll" >/dev/null \
             && ! compgen -G "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/*.dll" >/dev/null; then
            echo "::error::No DLLs produced (check toolchain/cross files)"; exit 1
          fi

          echo "system32 DLLs: $(ls -1 "${GITHUB_WORKSPACE}/VKD3D_WCP/system32"/*.dll 2>/dev/null | wc -l || true)"
          echo "syswow64 DLLs: $(ls -1 "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64"/*.dll 2>/dev/null | wc -l || true)"

          FILES_JSON="/tmp/files.json"; jq -n '[]' > "$FILES_JSON"
          add_file() { jq --arg s "$1" --arg t "$2" '. + [{source:$s, target:$t}]' "$FILES_JSON" > /tmp/.j && mv /tmp/.j "$FILES_JSON"; }
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/d3d12.dll"     ]] && add_file "system32/d3d12.dll"     '${system32}/d3d12.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/system32/d3d12core.dll" ]] && add_file "system32/d3d12core.dll" '${system32}/d3d12core.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/d3d12.dll"     ]] && add_file "syswow64/d3d12.dll"     '${syswow64}/d3d12.dll'
          [[ -f "${GITHUB_WORKSPACE}/VKD3D_WCP/syswow64/d3d12core.dll" ]] && add_file "syswow64/d3d12core.dll" '${syswow64}/d3d12core.dll'

          VC=$(date -u +%Y%m%d%H%M)
          jq -n \
            --arg VN "proton-arm64ec-${BASE}" \
            --argjson VC "$VC" \
            --arg DESC "VKD3D-Proton-arm64ec build by Ari" \
            --slurpfile F "$FILES_JSON" \
            '{type:"VKD3D", versionName:$VN, versionCode:$VC, description:$DESC, files:($F[0]//[])}' \
            > "${GITHUB_WORKSPACE}/VKD3D_WCP/profile.json"
          
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          tar -C "${GITHUB_WORKSPACE}/VKD3D_WCP" --zstd \
              --format=gnu --owner=0 --group=0 --numeric-owner \
              --sort=name \
              -cf "${OUT}/vkd3d-proton-arm64ec-${BASE}.wcp" \
              profile.json system32 syswow64

      - name: Build release notes
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf 'ðŸ¤– Automated VKD3D-Proton arm64ec builds (2.14.1+).\n\n' > "$NOTES"
          if compgen -G "${GITHUB_WORKSPACE}/out/vkd3d-proton-arm64ec-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/vkd3d-proton-arm64ec-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            ver="${latest#vkd3d-proton-arm64ec-}"; ver="${ver%.wcp}"
            echo "Current: ${ver}" >> "$NOTES"
          fi
          cat "$NOTES"

      - name: Create/Update GitHub Release (DXVK) + upload new WCPs
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="VKD3D-PROTON-ARM64EC"

          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
