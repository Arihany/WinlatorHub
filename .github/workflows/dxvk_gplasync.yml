name: Build DXVK gplasync v2

on:
  workflow_dispatch:              # Manual trigger (any branch)
  schedule:
    - cron: "0 18 * * *"         # Daily (UTC)

permissions:
  contents: write

# Consistent, strict, fast shell; zero caching everywhere
defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Fast guard (detect new DXVK tag + GPLAsync patch)
    runs-on: ubuntu-latest
    timeout-minutes: 2
    outputs:
      build: ${{ steps.decide.outputs.build }}
    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      RELEASE_TAG: DXVK-GPLASYNC
      GPLASYNC_BASE_URL: https://gitlab.com/Ph42oN/dxvk-gplasync/-/raw/main/patches
      DXVK_REPO: doitsujin/dxvk
    steps:
      - name: Install jq, curl (minimal)                     # No caches, just essentials
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends jq curl ca-certificates

      - name: Collect already-published (base,rev)           # Read current assets to avoid duplicates
        id: have
        run: |
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/${RELEASE_TAG}" || true)"
          if [ "$HTTP" = "200" ]; then
            jq -r '.assets[].name' /tmp/rel.json \
              | sed -n -E 's/^dxvk-gplasync-([0-9]+\.[0-9]+(\.[0-9]+)?)-([0-9]+)\.wcp$/\1 \3/p' \
              | sort -V > /tmp/exist.txt
          else
            : > /tmp/exist.txt
          fi
          echo "Existing base/rev:"; cat /tmp/exist.txt || true

      - name: Detect any missing candidate (API-only)        # Build only when a suitable patch exists and is new
        id: detect
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}
          DXVK_REPO: ${{ env.DXVK_REPO }}
          GPLASYNC_BASE_URL: ${{ env.GPLASYNC_BASE_URL }}
        run: |
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          # Fetch tags and keep semantic v* >= 2.3.1
          curl -fsSL "${auth[@]}" "${ver[@]}" "$API/repos/${DXVK_REPO}/tags?per_page=100" \
            | jq -r '.[].name' \
            | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -V > /tmp/tags.txt

          awk '
            function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
              for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1} return 0}
            { base=substr($0,2); if (cmp(base,"2.3.1")>=0) print $0 }
          ' /tmp/tags.txt > /tmp/candidates.txt

          echo -n > /tmp/missing.flag

          while read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#v}"
            mm="${base%.*}"

            found_rev=""
            # Try exact base first
            for n in 9 8 7 6 5 4 3 2 1; do
              url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${base}-${n}.patch"
              if curl -fsI "$url" >/dev/null 2>&1; then found_rev="$n"; break; fi
            done
            # Fallback to major.minor if exact not found
            if [ -z "$found_rev" ] && [ "$mm" != "$base" ]; then
              for n in 9 8 7 6 5 4 3 2 1; do
                url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${mm}-${n}.patch"
                if curl -fsI "$url" >/devnull 2>&1; then found_rev="$n"; break; fi
              done
            fi

            if [ -n "$found_rev" ] && ! grep -Fq "${base} ${found_rev}" /tmp/exist.txt; then
              echo "Missing: ${base}-${found_rev}"
              echo "yes" > /tmp/missing.flag
              break
            fi
          done < /tmp/candidates.txt

          if [ "$(cat /tmp/missing.flag 2>/dev/null)" = "yes" ]; then
            echo "missing=true" >> "$GITHUB_OUTPUT"
          else
            echo "missing=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Decide build                                    # Boolean output for downstream job
        id: decide
        run: |
          if [ "${{ steps.detect.outputs.missing }}" = "true" ]; then
            echo "build=true"  >> "$GITHUB_OUTPUT"
          else
            echo "build=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-release:
    name: Build & release (gplasync variants)
    runs-on: ubuntu-24.04
    needs: guard
    if: needs.guard.outputs.build == 'true'
    env:
      DXVK_REPO: doitsujin/dxvk
      GPLASYNC_BASE_URL: https://gitlab.com/Ph42oN/dxvk-gplasync/-/raw/main/patches
      PREFIX_X64: ${{ github.workspace }}/dist-x64
      PREFIX_X86: ${{ github.workspace }}/dist-x86
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: DXVK-GPLASYNC
      GH_TOKEN: ${{ github.token }}
    steps:
      # ───────────── Tooling (no caches) ─────────────
      - name: Install host tooling (lean; no cache)           # Keep runtime short, deps minimal
        run: |
          sudo apt-get -yq update
          sudo apt-get -yq install --no-install-recommends \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd gh

      - name: Ensure glslang (--vn) is available              # DXVK requires --vn support
        run: |
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Download llvm-mingw (ucrt, ubuntu x86_64)       # Provides clang toolchains for mingw targets
        run: |
          json=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest)
          url=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .browser_download_url' | head -n1)
          [[ -n "$url" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }
          sudo mkdir -p "$TOOLCHAIN_DIR"
          curl -fL -H "Authorization: Bearer $GH_TOKEN" "$url" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      # ───────────── Cross files (clang; with robust fallbacks) ─────────────
      - name: Create cross files (x64 / x86)
        run: |
          cat > "${{ github.workspace }}/x86_64.cross" << 'EOF'
          [binaries]
          ar = 'x86_64-w64-mingw32-ar'
          c = 'x86_64-w64-mingw32-clang'
          cpp = 'x86_64-w64-mingw32-clang++'
          windres = 'x86_64-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86_64'
          cpu = 'x86_64'
          endian = 'little'
          [properties]
          needs_exe_wrapper = true
          EOF
          cat > "${{ github.workspace }}/i686.cross" << 'EOF'
          [binaries]
          ar = 'i686-w64-mingw32-ar'
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          windres = 'i686-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          [properties]
          needs_exe_wrapper = true
          EOF
          # Fallbacks (keep the build flowing)
          for f in x86_64 i686; do
            command -v ${f}-w64-mingw32-windres >/dev/null || \
              sed -i "s/windres = .*/windres = 'llvm-rc'/" "${{ github.workspace }}/$f.cross"
          done
          
          # Prefer llvm-strip; if missing, fall back per triplet (or plain strip as last resort)
          if ! command -v llvm-strip >/dev/null; then
            if command -v x86_64-w64-mingw32-strip >/dev/null; then
              sed -i "s/^[[:space:]]*strip.*/strip = 'x86_64-w64-mingw32-strip'/" "${{ github.workspace }}/x86_64.cross"
            else
              sed -i "s/^[[:space:]]*strip.*/strip = 'strip'/" "${{ github.workspace }}/x86_64.cross"
            fi
            if command -v i686-w64-mingw32-strip >/dev/null; then
              sed -i "s/^[[:space:]]*strip.*/strip = 'i686-w64-mingw32-strip'/" "${{ github.workspace }}/i686.cross"
            else
              sed -i "s/^[[:space:]]*strip.*/strip = 'strip'/" "${{ github.workspace }}/i686.cross"
            fi
          fi


      # ───────────── Source & tag selection ─────────────
      - name: Clone DXVK (tags + submodules)                  # Full tag list required for multi-version loop
        run: |
          git clone --recurse-submodules https://github.com/${DXVK_REPO}.git src
          cd src && git fetch --tags --force

      - name: Resolve versions (>= v2.3.1) and compute NEW to build
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          cd src
          git tag -l 'v*' \
            | { grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' || true; } \
            | sort -V \
            | awk '
                function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                  for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
                {ver=substr($0,2); if (cmp(ver,"2.3.1")>=0) print $0}
              ' > "${GITHUB_WORKSPACE}/versions.txt"

          : > "${GITHUB_WORKSPACE}/to_build.txt"
          EXIST="/tmp/exist.txt"; : > "$EXIST"
          if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh api repos/"${REPO}"/releases/tags/"${RELEASE_TAG}" \
              | jq -r '.assets[].name' \
              | sed -n -E 's/^dxvk-gplasync-([0-9]+\.[0-9]+(\.[0-9]+)?)\-([0-9]+)\.wcp$/\1 \3/p' \
              | sort -V > "$EXIST" || true
          fi

          while IFS= read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#v}"; mm="${base%.*}"
            found_rev=""; patch_base=""
            # Try exact base first
            for n in 9 8 7 6 5 4 3 2 1; do
              url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${base}-${n}.patch"
              if curl -fsI "$url" >/dev/null 2>&1; then found_rev="$n"; patch_base="$base"; break; fi
            done
            # Fallback to major.minor when exact not found
            if [[ -z "$found_rev" && "$mm" != "$base" ]]; then
              for n in 9 8 7 6 5 4 3 2 1; do
                url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${mm}-${n}.patch"
                if curl -fsI "$url" >/dev/null 2>&1; then found_rev="$n"; patch_base="$mm"; break; fi
              done
            fi
            # If no patch exists, skip this tag
            if [[ -z "$found_rev" ]]; then
              echo "::notice::No gplasync patch for ${base} (or ${mm}); skipping"
              continue
            fi
            # Skip if already built
            if grep -Fq "${base} ${found_rev}" "$EXIST"; then
              echo "Skip ${base}-${found_rev} (already built)"
              continue
            fi
            # Record work item: tag base rev patch_base
            echo "${tag} ${base} ${found_rev} ${patch_base}" >> "${GITHUB_WORKSPACE}/to_build.txt"
          done < "${GITHUB_WORKSPACE}/versions.txt"

          echo "To build (tag base rev patch_base):"
          cat "${GITHUB_WORKSPACE}/to_build.txt" || true

      # ───────────── Build loop (strip-safe) ─────────────
      - name: Build NEW versions only (gplasync → WCP)        # Meson -Dstrip=true performs the DLL strip
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          if [[ ! -s "${GITHUB_WORKSPACE}/to_build.txt" ]]; then
            echo "No new versions to build."; exit 0
          fi

          while read -r tag base rev patch_base; do
            echo "::group::Build ${tag} (gplasync rev ${rev}, patch_base ${patch_base})"
            git checkout -f "$tag"
            git submodule update --init --recursive --checkout

            # Apply gplasync patch (use git am, fallback to apply --reject)
            url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${patch_base}-${rev}.patch"
            curl -fL "$url" -o /tmp/gpl.patch
            git config user.name  ci
            git config user.email ci@local
            if git am -3 /tmp/gpl.patch; then :; else git am --abort || true; git apply -p1 --reject /tmp/gpl.patch; fi
            grep -q "enableAsync" src/dxvk/dxvk_options.h || { echo "::error::Patch not applied cleanly for ${base} (using ${patch_base}-${rev})"; git status -sb; exit 1; }

            # --- Apply minimal compat patches (D3D9/11 headers) ---
            hdr="src/d3d9/d3d9_include.h"
            if [[ -f "$hdr" ]]; then
              for sym in _D3DDEVINFO_RESOURCEMANAGER _D3DDEVINFO_D3D9PIPELINETIMINGS _D3DDEVINFO_VCACHE _D3DDEVINFO_PRIVATEDATA _D3DDEVINFO_VERTEXSTATS; do
                if grep -q "typedef struct ${sym}" "$hdr"; then
                  awk -v pat="typedef struct ${sym}" 'BEGIN{drop=0}
                    index($0, pat){drop=1; next}
                    drop==1 && /\}[[:space:]]*[^;]*;[[:space:]]*$/ {drop=0; next}
                    drop==0 {print}' "$hdr" > "$hdr.new" && mv "$hdr.new" "$hdr"
                fi
              done
            fi
            hdr2="src/d3d11/d3d11_texture.h"
            if [[ -f "$hdr2" ]] && grep -qE 'constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource' "$hdr2"; then
              sed -i -E 's/static[[:space:]]+constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource[[:space:]]*=[[:space:]]*D3D11_MAP\(-1u\);/inline static const D3D11_MAP UnmappedSubresource = (D3D11_MAP)0xFFFFFFFFu;/' "$hdr2" || true
            fi
            # ------------------------------------------------------

            # Optional feature flags if supported by this tag
            MESON_D3D8=""
            if [[ -f meson_options.txt ]] && grep -qE "option\(['\"]enable_d3d8['\"]" meson_options.txt; then
              MESON_D3D8="-Denable_d3d8=true"
            fi

            # Fresh builds per arch (strip handled by Meson; no extra strip pass)
            rm -rf "${GITHUB_WORKSPACE}/build.x64" "${GITHUB_WORKSPACE}/build.x86" \
                   "${GITHUB_WORKSPACE}/dist-x64" "${GITHUB_WORKSPACE}/dist-x86" \
                   "${GITHUB_WORKSPACE}/DXVK_WCP"

            meson setup "${GITHUB_WORKSPACE}/build.x64" \
              --cross-file "${GITHUB_WORKSPACE}/x86_64.cross" \
              --buildtype release \
              --prefix "${PREFIX_X64}" \
              -Dbuild_id=false -Dstrip=true \
              ${MESON_D3D8}
            ninja -C "${GITHUB_WORKSPACE}/build.x64" -j"$(nproc)"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.x64"

            meson setup "${GITHUB_WORKSPACE}/build.x86" \
              --cross-file "${GITHUB_WORKSPACE}/i686.cross" \
              --buildtype release \
              --prefix "${PREFIX_X86}" \
              -Dbuild_id=false -Dstrip=true \
              ${MESON_D3D8}
            ninja -C "${GITHUB_WORKSPACE}/build.x86" -j"$(nproc)"
            meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.x86"

            # Collect DLLs
            mkdir -p "${GITHUB_WORKSPACE}/DXVK_WCP/system32" "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64"
            cp -v "${PREFIX_X64}/bin/"*.dll  "${GITHUB_WORKSPACE}/DXVK_WCP/system32/" || true
            cp -v "${PREFIX_X86}/bin/"*.dll "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64/" || true

            # Build profile.json from discovered DLLs
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x64.txt || true
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find syswow64 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x86.txt || true
            if [[ ! -s /tmp/x64.txt && ! -s /tmp/x86.txt ]]; then
              echo "::error::No DLLs discovered for ${base}-${rev}"; exit 1; fi

            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x64.txt  > /tmp/x64.json
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x86.txt  > /tmp/x86.json

            DESC="DXVK gplasync build by Ari"
            jq -n \
              --arg VN "gplasync-${base}" \
              --argjson VC "${rev}" \
              --arg DESC "$DESC" \
              --arg SYS '${system32}/' \
              --arg WOW '${syswow64}/' \
              --slurpfile x64 /tmp/x64.json \
              --slurpfile x86 /tmp/x86.json \
              '
              ($x64[0] // []) as $A |
              ($x86[0] // []) as $B |
              {
                type: "DXVK",
                versionName: $VN,
                versionCode: $VC,
                description: $DESC,
                files: [
                  ($A[]? | {source: ("system32/"+.), target: ($SYS + .)}),
                  ($B[]? | {source: ("syswow64/"+.), target: ($WOW + .)})
                ]
              }' > "${GITHUB_WORKSPACE}/DXVK_WCP/profile.json"

            # Pack WCP (reproducible-ish tar owner/group/sort); date from tag
            export SOURCE_DATE_EPOCH="$(git log -1 --format=%ct "$tag")"
            mkdir -p "${GITHUB_WORKSPACE}/out"
            tar -C "${GITHUB_WORKSPACE}/DXVK_WCP" --zstd --format=gnu --owner=0 --group=0 --numeric-owner \
              --sort=name \
              -cf "${GITHUB_WORKSPACE}/out/dxvk-gplasync-${base}-${rev}.wcp" profile.json system32 syswow64
            echo "::endgroup::"
          done < "${GITHUB_WORKSPACE}/to_build.txt"

      # ───────────── Release notes & upload ─────────────
      - name: Build release notes (minimal)                   # Show latest built as "Current"
        run: |
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          printf '🤖 Automated gplasync builds (2.3.1+)\n\n' > "$NOTES"
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-gplasync-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-gplasync-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            cur="${latest#dxvk-gplasync-}"; cur="${cur%.wcp}"
            echo "Current: ${cur}" >> "$NOTES"
          fi
          cat "$NOTES"

      - name: Create/Update GitHub Release (DXVK-GPLASYNC) + upload WCPs  # Append new artifacts (clobber same names)
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="DXVK-GPLASYNC"

          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          if compgen -G "${GITHUB_WORKSPACE}/out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" "${GITHUB_WORKSPACE}/out/"*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
