name: Build DXVK gplasync-arm64ec

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  build-and-release:
    runs-on: ubuntu-24.04
    env:
      DXVK_REPO: doitsujin/dxvk
      GPLASYNC_BASE_URL: https://gitlab.com/Ph42oN/dxvk-gplasync/-/raw/main/patches
      PREFIX_EC: ${{ github.workspace }}/dist-arm64ec
      PREFIX_X86: ${{ github.workspace }}/dist-x86
      TOOLCHAIN_DIR: /opt/llvm-mingw
      RELEASE_TAG: DXVK-GPLASYNC-ARM64EC
      GH_TOKEN: ${{ github.token }}

    steps:
      # ───────────────────────────────── Tooling ──────────────────────────────
      - name: Install host tooling
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd ccache file rsync

      - name: Ensure glslang (--vn) available
        run: |
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      # ───────────────────────────── llvm-mingw (cached) ──────────────────────
      - name: Resolve llvm-mingw (ucrt, ubuntu x86_64)
        id: llvm
        run: |
          json=$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" https://api.github.com/repos/mstorsjo/llvm-mingw/releases/latest)
          url=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .browser_download_url' | head -n1)
          name=$(echo "$json" | jq -r '.assets[] | select(.name|test("ucrt-ubuntu-.*-x86_64\\.tar\\.xz$")) .name' | head -n1)
          [[ -n "$url" && -n "$name" ]] || { echo "::error::llvm-mingw asset not found"; exit 1; }
          echo "url=$url"  >> "$GITHUB_OUTPUT"
          echo "name=$name" >> "$GITHUB_OUTPUT"

      - name: Cache llvm-mingw (extracted)
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: ${{ env.TOOLCHAIN_DIR }}
          key: llvm-mingw-${{ steps.llvm.outputs.name }}

      - name: Fetch llvm-mingw (if cache miss)
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir -p "$TOOLCHAIN_DIR"
          curl -fL -H "Authorization: Bearer $GH_TOKEN" "${{ steps.llvm.outputs.url }}" -o /tmp/llvm-mingw.tar.xz
          sudo tar -C "$TOOLCHAIN_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz

      - name: Add toolchain to PATH
        run: echo "$TOOLCHAIN_DIR/bin" >> "$GITHUB_PATH"

      # ───────────────────────────────── ccache ───────────────────────────────
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ccache-${{ runner.os }}-${{ runner.arch }}-dxvk-gplasync
          restore-keys: |
            ccache-${{ runner.os }}-${{ runner.arch }}-

      - name: Configure ccache
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=2G" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=1" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${{ github.workspace }}" >> $GITHUB_ENV

      # ───────────────────────────── Cross files ──────────────────────────────
      - name: Create cross files
        run: |
          cat > "${{ github.workspace }}/arm64ec.cross" << 'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = ['ccache','arm64ec-w64-mingw32-gcc']
          cpp = ['ccache','arm64ec-w64-mingw32-g++']
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'arm64ec-w64-mingw32-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          cat > "${{ github.workspace }}/i686.cross" << 'EOF'
          [binaries]
          ar = 'i686-w64-mingw32-ar'
          c = ['ccache','i686-w64-mingw32-gcc']
          cpp = ['ccache','i686-w64-mingw32-g++']
          windres = 'i686-w64-mingw32-windres'
          strip = 'i686-w64-mingw32-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF
          for f in arm64ec i686; do
            command -v ${f}-w64-mingw32-windres >/dev/null || \
              sed -i "s/windres = .*/windres = 'llvm-rc'/" "${{ github.workspace }}/$f.cross"
          done

      # ───────────────────────────── Source & tags ────────────────────────────
      - name: Clone DXVK (full tags, submodules)
        run: |
          git clone --recurse-submodules https://github.com/${DXVK_REPO}.git src
          cd src
          git fetch --tags --force

      - name: Resolve upstream versions (>= v2.3.1) & compute NEW to build
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          cd src
          git tag -l 'v*' \
            | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -V \
            | awk '
                function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                  for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
                {ver=substr($0,2); if (cmp(ver,"2.3.1")>=0) print $0}
              ' > "${GITHUB_WORKSPACE}/versions.txt"
          echo "Candidates:"; cat "${GITHUB_WORKSPACE}/versions.txt"

          EXIST="/tmp/exist.txt"; : > "$EXIST"
          if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh api repos/"${REPO}"/releases/tags/"${RELEASE_TAG}" \
              | jq -r '.assets[].name' \
              | sed -n -E 's/^dxvk-gplasync-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)-([0-9]+)\.wcp$/\1 \3/p' \
              | sort -V > "$EXIST" || true
          fi
          echo "Already published (base rev):"; cat "$EXIST" || true

          : > "${GITHUB_WORKSPACE}/to_build.txt"
          while IFS= read -r tag; do
            base="${tag#v}"                  # e.g. 2.4.1
            mm="${base%.*}"                  # major.minor, e.g. 2.4 (if base has 3 parts)
            found_rev=""; patch_base=""

            # 1) try exact base (e.g. 2.4.1)
            for n in 9 8 7 6 5 4 3 2 1; do
              url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${base}-${n}.patch"
              if curl -fsI "$url" >/dev/null 2>&1; then found_rev="$n"; patch_base="$base"; break; fi
            done

            # 2) fallback to major.minor (e.g. 2.4) if needed
            if [[ -z "$found_rev" && "$mm" != "$base" && "$mm" =~ ^[0-9]+\.[0-9]+$ ]]; then
              for n in 9 8 7 6 5 4 3 2 1; do
                url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${mm}-${n}.patch"
                if curl -fsI "$url" >/dev/null 2>&1; then found_rev="$n"; patch_base="$mm"; break; fi
              done
            fi

            if [[ -z "$found_rev" ]]; then
              echo "::notice::No gplasync patch for ${base} (or ${mm}); skipping"
              continue
            fi

            # skip if (base,found_rev) already built
            if grep -Fq "${base} ${found_rev}" "$EXIST"; then
              echo "Skip ${base}-${found_rev} (already built)"; continue
            fi

            # write: upstream_tag  base  rev  patch_base_used
            echo "${tag} ${base} ${found_rev} ${patch_base}" >> "${GITHUB_WORKSPACE}/to_build.txt"
          done < "${GITHUB_WORKSPACE}/versions.txt"

          echo "To build (tag base rev patch_base):"
          cat "${GITHUB_WORKSPACE}/to_build.txt" || true

      # ─────────────────────── Build NEW (loop per version) ───────────────────
      - name: Build NEW versions only (gplasync-arm64ec → WCP)
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}
        run: |
          set -euo pipefail
          OUT="${GITHUB_WORKSPACE}/out"; mkdir -p "$OUT"
          cd "${GITHUB_WORKSPACE}/src"

          if [[ ! -s "${GITHUB_WORKSPACE}/to_build.txt" ]]; then
            echo "No new versions to build."
            exit 0
          fi

          while read -r tag base rev patch_base; do
            echo "::group::Build ${tag} (gplasync rev ${rev}, patch_base ${patch_base})"
            git checkout -f "$tag"
            git submodule update --init --recursive

            # ── Apply exact/fallback GPLASYNC patch
            url="${GPLASYNC_BASE_URL}/dxvk-gplasync-${patch_base}-${rev}.patch"
            curl -fL "$url" -o /tmp/gpl.patch
            git config user.name  ci
            git config user.email ci@local
            if git am -3 /tmp/gpl.patch; then :; else git am --abort || true; git apply -p1 --reject /tmp/gpl.patch; fi
            grep -q "enableAsync" src/dxvk/dxvk_options.h || { echo "::error::Patch not applied cleanly for ${base} (using ${patch_base}-${rev})"; git status -sb; exit 1; }

            # ── Minimal compat fixes
            hdr="src/d3d9/d3d9_include.h"
            if [[ -f "$hdr" ]]; then
              for sym in _D3DDEVINFO_RESOURCEMANAGER _D3DDEVINFO_D3D9PIPELINETIMINGS _D3DDEVINFO_VCACHE _D3DDEVINFO_PRIVATEDATA _D3DDEVINFO_VERTEXSTATS; do
                if grep -q "typedef struct ${sym}" "$hdr"; then
                  awk -v pat="typedef struct ${sym}" 'BEGIN{drop=0} index($0, pat){drop=1; next} drop==1 && /\}[[:space:]]*[^;]*;[[:space:]]*$/ {drop=0; next} drop==0 {print}' "$hdr" > "$hdr.new" && mv "$hdr.new" "$hdr"
                fi
              done
            fi
            hdr2="src/d3d11/d3d11_texture.h"
            if [[ -f "$hdr2" ]]; then
              if grep -qE 'constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource' "$hdr2"; then
                sed -i -E 's/static[[:space:]]+constexpr[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource[[:space:]]*=[[:space:]]*D3D11_MAP\(-1u\);/inline static const D3D11_MAP UnmappedSubresource = (D3D11_MAP)0xFFFFFFFFu;/' "$hdr2" || true
              elif grep -qE 'static[[:space:]]+const[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource' "$hdr2"; then
                sed -i -E 's/^([[:space:]]*)static[[:space:]]+const[[:space:]]+D3D11_MAP[[:space:]]+UnmappedSubresource[[:space:]]*=.*/\1inline static const D3D11_MAP UnmappedSubresource = (D3D11_MAP)0xFFFFFFFFu;/' "$hdr2" || true
              fi
            fi

            # ── HUD tag (no patch number); DO NOT delete upstream tags
            HUD_TAG="v${base}-arm64ec"   # e.g. v2.4.1-arm64ec
            git tag -d "$HUD_TAG" 2>/dev/null || true
            git tag -a "$HUD_TAG" -m "HUD tag $HUD_TAG"

            # ── Detect optional features
            MESON_D3D8=""
            if [[ -f meson_options.txt ]] && grep -qE "option\(['\"]enable_d3d8['\"]" meson_options.txt; then
              MESON_D3D8="-Denable_d3d8=true"
            fi

            # ── Clean previous artifacts
            rm -rf "${GITHUB_WORKSPACE}/build.ec" "${GITHUB_WORKSPACE}/build.x86" \
                   "${GITHUB_WORKSPACE}/dist-arm64ec" "${GITHUB_WORKSPACE}/dist-x86" \
                   "${GITHUB_WORKSPACE}/DXVK_WCP"

            # ── ARM64EC
            meson setup "${GITHUB_WORKSPACE}/build.ec" \
              --cross-file "${GITHUB_WORKSPACE}/arm64ec.cross" \
              --buildtype release \
              --prefix "${PREFIX_EC}" \
              -Dbuild_id=false -Dstrip=true \
              ${MESON_D3D8}
            ninja -C "${GITHUB_WORKSPACE}/build.ec" -j"$(nproc)"
            meson install -C "${GITHUB_WORKSPACE}/build.ec"

            # ── i686
            meson setup "${GITHUB_WORKSPACE}/build.x86" \
              --cross-file "${GITHUB_WORKSPACE}/i686.cross" \
              --buildtype release \
              --prefix "${PREFIX_X86}" \
              -Dbuild_id=false -Dstrip=true \
              ${MESON_D3D8}
            ninja -C "${GITHUB_WORKSPACE}/build.x86" -j"$(nproc)"
            meson install -C "${GITHUB_WORKSPACE}/build.x86"

            # ── Layout WCP (gplasync-arm64ec naming, versionCode = rev)
            mkdir -p "${GITHUB_WORKSPACE}/DXVK_WCP/system32" "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64"
            cp -v "${PREFIX_EC}/bin/"*.dll  "${GITHUB_WORKSPACE}/DXVK_WCP/system32/" || true
            cp -v "${PREFIX_X86}/bin/"*.dll "${GITHUB_WORKSPACE}/DXVK_WCP/syswow64/" || true

            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/ec.txt || true
            (cd "${GITHUB_WORKSPACE}/DXVK_WCP" && find syswow64 -maxdepth 1 -type f -name '*.dll' -printf '%f\n' | sort) > /tmp/x86.txt || true
            if [[ ! -s /tmp/ec.txt && ! -s /tmp/x86.txt ]]; then
              echo "::error::No DLLs discovered for ${base}-${rev}"; exit 1; fi

            jq -R -s 'split("\n") | map(select(length>0))' /tmp/ec.txt  > /tmp/ec.json
            jq -R -s 'split("\n") | map(select(length>0))' /tmp/x86.txt > /tmp/x86.json

            DESC="DXVK gplasync-arm64ec build by Ari"
            if [[ "${patch_base}" != "${base}" ]]; then
              DESC="${DESC} (patch-from ${patch_base})"
            fi

            jq -n \
              --arg VN "gplasync-arm64ec-${base}" \
              --argjson VC "${rev}" \
              --arg DESC "$DESC" \
              --arg SYS '${system32}/' \
              --arg WOW '${syswow64}/' \
              --slurpfile ec /tmp/ec.json \
              --slurpfile x86 /tmp/x86.json \
              '
              ($ec[0]  // []) as $E |
              ($x86[0] // []) as $X |
              {
                type: "DXVK",
                versionName: $VN,      # e.g. gplasync-arm64ec-2.4.1
                versionCode: $VC,      # e.g. 1
                description: $DESC,
                files: [
                  ($E[]? | {source: ("system32/"+.), target: ($SYS + .)}),
                  ($X[]? | {source: ("syswow64/"+.), target: ($WOW + .)})
                ]
              }' > "${GITHUB_WORKSPACE}/DXVK_WCP/profile.json"

            mkdir -p "${GITHUB_WORKSPACE}/out"
            wcp="dxvk-gplasync-arm64ec-${base}-${rev}.wcp"
            tar -C "${GITHUB_WORKSPACE}/DXVK_WCP" --zstd \
                --format=gnu --owner=0 --group=0 --numeric-owner \
                -cf "${GITHUB_WORKSPACE}/out/${wcp}" profile.json system32 syswow64
            echo "::endgroup::"
          done < "${GITHUB_WORKSPACE}/to_build.txt"

      # ───────────────────── Release notes (links to upstream) ────────────────
      - name: Build release notes (links only)
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          # Always reset body header only
          printf '🤖 Automated gplasync-arm64ec builds (2.3.1+)\n\n' > "$NOTES"
          cat "$NOTES"

      # ─────────────────────── Upload & Release (append) ──────────────────────
      - name: Create/Update GitHub Release (DXVK-GPLASYNC-ARM64EC) + upload new WCPs
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          NOTES="${GITHUB_WORKSPACE}/RELEASE_NOTES.md"
          RELEASE_TAG="${RELEASE_TAG}"

          # Rebuild body header
          printf '🤖 Automated gplasync-arm64ec builds (2.3.1+)\n\n' > "$NOTES"

          # Compute Current only for release body
          cur=""
          if compgen -G "${GITHUB_WORKSPACE}/out/dxvk-gplasync-arm64ec-*.wcp" > /dev/null; then
            latest="$(ls -1 "${GITHUB_WORKSPACE}/out"/dxvk-gplasync-arm64ec-*.wcp | sed 's#.*/##' | LC_ALL=C sort -V | tail -n1)"
            cur="${latest#dxvk-gplasync-arm64ec-}"; cur="${cur%.wcp}"
          else
            if gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
              assets_json="$(gh api repos/${REPO}/releases/tags/${RELEASE_TAG})"
              mapfile -t list < <(
                echo "$assets_json" \
                | jq -r '.assets[].name' \
                | grep -E '^dxvk-gplasync-arm64ec-.*\.wcp$' \
                | LC_ALL=C sort -V
              )
              if ((${#list[@]} > 0)); then
                latest="${list[-1]}"
                cur="${latest#dxvk-gplasync-arm64ec-}"; cur="${cur%.wcp}"
              fi
            fi
          fi

          [[ -n "$cur" ]] && echo "Current: ${cur}" >> "$NOTES"

          # Create or update release
          if ! gh release view "${RELEASE_TAG}" --repo "${REPO}" >/dev/null 2>&1; then
            gh release create "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          else
            gh release edit   "${RELEASE_TAG}" --repo "${REPO}" -t "${RELEASE_TAG}" -F "$NOTES"
          fi

          # Upload new assets if any
          if compgen -G "out/*.wcp" > /dev/null; then
            gh release upload "${RELEASE_TAG}" out/*.wcp --repo "${REPO}" --clobber
          else
            echo "No new WCP files to upload."
          fi
