name: Build DXVK-Sarek (arm64ec + i686)

on:
  workflow_dispatch: {}

permissions:
  contents: read

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  build:
    name: Fast DLL build (arm64ec + i686)
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      PREFIX_ARM64EC: ${{ github.workspace }}/dist-arm64ec
      PREFIX_I686: ${{ github.workspace }}/dist-i686
      TOOLCHAIN_ARM64EC: ${{ github.workspace }}/.toolchains/llvm-mingw-arm64ec
      TOOLCHAIN_LLVM_MINGW: ${{ github.workspace }}/.toolchains/llvm-mingw
    steps:
      - name: Install deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            curl xz-utils jq ca-certificates git meson ninja-build \
            glslang-tools pkg-config build-essential python3 zstd file rsync

      - name: Ensure glslang (--vn) available
        run: |
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Download bylaws/llvm-mingw (ARM64EC toolchain; Linux archive)
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/bylaws/llvm-mingw/releases/latest"
          json="$(curl -fsSL -H 'Accept: application/vnd.github+json' "$API")"
      
          # 1) 가장 안전한: 'arm64ec' AND ('linux' OR 'ubuntu') AND tar 계열 확장자
          url="$(
            echo "$json" | jq -r '
              .assets[]
              | select((.name|test("arm64ec";"i"))
                       and (.name|test("(linux|ubuntu)";"i"))
                       and (.name|test("\\.(tar\\.(zst|xz|gz)|t(z|x|g)z)$";"i")))
              .browser_download_url' | head -n1
          )"
      
          # 2) 느슨한 폴백: arm64ec만 들어간 tar 계열
          if [ -z "$url" ]; then
            url="$(
              echo "$json" | jq -r '
                .assets[]
                | select((.name|test("arm64ec";"i"))
                         and (.name|test("\\.(tar\\.(zst|xz|gz)|t(z|x|g)z)$";"i")))
                .browser_download_url' | head -n1
            )"
          fi
      
          if [ -z "$url" ]; then
            echo "::group::Available assets (for debugging)"
            echo "$json" | jq -r '.assets[].name'
            echo "::endgroup::"
            echo "::error::ARM64EC toolchain asset not found (try relaxing filters)"
            exit 1
          fi
      
          mkdir -p "$TOOLCHAIN_ARM64EC"
          file=/tmp/arm64ec-toolchain.tar.any
          curl -fL "$url" -o "$file"
      
          case "$url" in
            *.tar.zst|*.tzst) tar -C "$TOOLCHAIN_ARM64EC" --strip-components=1 --zstd -xvf "$file" ;;
            *.tar.xz|*.txz)  tar -C "$TOOLCHAIN_ARM64EC" --strip-components=1 -xJf  "$file" ;;
            *.tar.gz|*.tgz)  tar -C "$TOOLCHAIN_ARM64EC" --strip-components=1 -xzf  "$file" ;;
            *)
              echo "::error::Unknown ARM64EC archive format: $url"; exit 1;;
          esac
      
          echo "$TOOLCHAIN_ARM64EC/bin" >> "$GITHUB_PATH"

      - name: Verify toolchains in PATH
        run: |
          which arm64ec-w64-mingw32-gcc; arm64ec-w64-mingw32-gcc --version
          which i686-w64-mingw32-gcc;  i686-w64-mingw32-gcc --version
          which llvm-strip || true

      - name: Clone DXVK-Sarek (latest main + submodules)
        run: |
          git clone --recurse-submodules https://github.com/${SAREK_REPO}.git src
          cd src
          git fetch --force
          git checkout -f origin/main

      - name: Create Meson cross file (ARM64EC)
        working-directory: src
        run: |
          cat > cross-arm64ec.txt <<'EOF'
          [binaries]
          c = 'arm64ec-w64-mingw32-clang'
          cpp = 'arm64ec-w64-mingw32-clang++'
          ar = 'arm64ec-w64-mingw32-ar'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'llvm-strip'
          # widl가 없으면 생략 가능 (메소드에서 rc만 쓰는 경우가 많음)
      
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
      
          # 폴백: clang 접두어만 있을 때 gcc 이름도 알아서 동작하도록 심볼릭 링크
          if ! command -v arm64ec-w64-mingw32-gcc >/dev/null && command -v arm64ec-w64-mingw32-clang >/dev/null; then
            ln -sf "$(command -v arm64ec-w64-mingw32-clang)"  "$TOOLCHAIN_ARM64EC/bin/arm64ec-w64-mingw32-gcc"
            ln -sf "$(command -v arm64ec-w64-mingw32-clang++)" "$TOOLCHAIN_ARM64EC/bin/arm64ec-w64-mingw32-g++" || true
          fi
      
          # windres 없으면 llvm-rc로 대체
          if ! command -v arm64ec-w64-mingw32-windres >/dev/null && command -v llvm-rc >/dev/null; then
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-arm64ec.txt
          fi

      - name: Build ARM64EC DLLs
        working-directory: src
        run: |
          meson setup "${GITHUB_WORKSPACE}/build.arm64ec" \
            --cross-file cross-arm64ec.txt \
            --buildtype release --prefix "${PREFIX_ARM64EC}" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "${GITHUB_WORKSPACE}/build.arm64ec" -j"$(nproc)"
          meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.arm64ec"

      - name: Build i686 DLLs (WOW64)
        working-directory: src
        run: |
          meson setup "${GITHUB_WORKSPACE}/build.i686" \
            --cross-file build-win32.txt \
            --buildtype release --prefix "${PREFIX_I686}" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "${GITHUB_WORKSPACE}/build.i686" -j"$(nproc)"
          meson install --no-rebuild -C "${GITHUB_WORKSPACE}/build.i686"

      - name: Collect DLLs
        run: |
          set -Eeuo pipefail
          mkdir -p artifacts/arm64ec artifacts/i686
          cp -v "${PREFIX_ARM64EC}/bin/"*.dll artifacts/arm64ec/ || true
          cp -v "${PREFIX_I686}/bin/"*.dll  artifacts/i686/     || true
          (ls -1 artifacts/arm64ec || true) && (ls -1 artifacts/i686 || true)

      - name: Upload artifacts (DLLs only)
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-dlls-${{ github.sha }}
          path: |
            artifacts/arm64ec/*.dll
            artifacts/i686/*.dll
          if-no-files-found: error
