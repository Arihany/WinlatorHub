name: Build DXVK-Sarek arm64ec (MSVC/Windows SDK)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *"   # Daily (UTC)

permissions:
  contents: write

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    name: Fast guard (new Sarek tag?)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      build: ${{ steps.decide.outputs.build }}
    env:
      GH_TOKEN: ${{ github.token }}
      REPO: ${{ github.repository }}
      SAREK_REPO: pythonlover02/DXVK-Sarek
      RELEASE_TAG: DXVK-SAREK-ARM64EC
    steps:
      - name: Install jq, curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends jq curl

      - name: Collect already-published versions (DXVK-SAREK-ARM64EC)
        id: have
        run: |
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")
          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
                  "$API/repos/${REPO}/releases/tags/${RELEASE_TAG}" || true)"
          if [ "$HTTP" = "200" ]; then
            jq -r '.assets[].name' /tmp/rel.json \
              | sed -n -E 's/^dxvk-sarek-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > /tmp/exist.txt
          else
            : > /tmp/exist.txt
          fi
          echo "Existing:"; cat /tmp/exist.txt || true

      - name: Detect any missing tag (API-only; min v1.10.8)
        id: detect
        env:
          MIN_VER: "1.10.8"
        run: |
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")

          curl -fsSL "${auth[@]}" "${ver[@]}" "$API/repos/${SAREK_REPO}/tags?per_page=100" \
            | jq -r '.[].name' \
            | grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' \
            | sort -V > /tmp/tags.txt

          awk -v MIN="${MIN_VER}" '
            function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
              for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
            { base=substr($0,2); if (cmp(base,MIN)>=0) print base }
          ' /tmp/tags.txt > /tmp/candidates.txt

          echo "Candidates (>= ${MIN_VER}):"; cat /tmp/candidates.txt || true

          echo -n "no" > /tmp/missing.flag
          while read -r base; do
            [ -n "$base" ] || continue
            if ! grep -Fxq "$base" /tmp/exist.txt; then
              echo "MISSING: $base"
              echo -n "yes" > /tmp/missing.flag
              break
            fi
          done < /tmp/candidates.txt

          [ "$(cat /tmp/missing.flag 2>/dev/null || echo no)" = "yes" ] && echo "missing=true"  >> "$GITHUB_OUTPUT" || echo "missing=false" >> "$GITHUB_OUTPUT"

      - name: Decide build
        id: decide
        run: |
          if [ "${{ steps.detect.outputs.missing }}" = "true" ]; then
            echo "build=true"  >> "$GITHUB_OUTPUT"
          else
            echo "build=false" >> "$GITHUB_OUTPUT"
          fi

  build-and-release:
    name: Build & release DXVK-Sarek (ARM64EC + 32-bit) – MSVC
    runs-on: windows-latest
    needs: guard
    if: needs.guard.outputs.build == 'true'
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      PREFIX_X64: ${{ github.workspace }}\dist-arm64ec   # system32 (ARM64EC)
      PREFIX_X86: ${{ github.workspace }}\dist-x86       # syswow64 (Win32)
      RELEASE_TAG: DXVK-SAREK-ARM64EC
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools (Python, Meson/Ninja, jq, 7zip, zstd, Vulkan SDK)
        shell: powershell
        run: |
          python -m pip install --upgrade pip
          python -m pip install meson ninja
          choco install -y jq 7zip zstd vulkan-sdk
          $vk = (Get-ChildItem "C:\\VulkanSDK" | Sort-Object Name -Descending | Select-Object -First 1).FullName
          if (-not $vk) { Write-Error "Vulkan SDK not found" }
          $env:Path += ";$vk\Bin"  # glslangValidator

      - name: Ensure glslang (--vn) available
        shell: powershell
        run: |
          @"
          #version 450
          void main() {}
          "@ | Out-File -Encoding ascii $env:RUNNER_TEMP\min.comp
          glslangValidator --quiet --target-env vulkan1.1 --vn testvar -o $env:RUNNER_TEMP\min.h $env:RUNNER_TEMP\min.comp

      - name: Clone DXVK-Sarek (tags + submodules)
        shell: bash
        run: |
          git clone --recurse-submodules https://github.com/${SAREK_REPO}.git src
          cd src
          git fetch --tags --force
          git fetch origin main --force

      - name: Resolve Sarek tags (>= v1.10.8) & compute NEW
        shell: bash
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          cd src
          git tag --merged origin/main -l 'v*' \
            | { grep -E '^v[0-9]+\.[0-9]+(\.[0-9]+)?$' || true; } \
            | sort -V \
            | awk '
                function cmp(a,b,  i,A,B){split(a,A,".");split(b,B,".");
                  for(i=1;i<=3;i++){if((A[i]+0)<(B[i]+0))return -1;if((A[i]+0)>(B[i]+0))return 1}return 0}
                {ver=substr($0,2); if (cmp(ver,"1.10.8")>=0) print $0}
              ' > "${GITHUB_WORKSPACE}/versions.txt"

          : > "${GITHUB_WORKSPACE}/to_build.txt"

          EXIST="/tmp/exist.txt"; : > "$EXIST"
          if curl -sf -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${REPO}/releases/tags/${RELEASE_TAG}" -o /tmp/rel.json; then
            jq -r '.assets[].name' /tmp/rel.json \
              | sed -n -E 's/^dxvk-sarek-arm64ec-([0-9]+\.[0-9]+(\.[0-9]+)?)\.wcp$/\1/p' \
              | sort -V > "$EXIST" || true
          fi

          while IFS= read -r tag; do
            [ -n "$tag" ] || continue
            base="${tag#v}"
            if ! grep -Fxq "$base" "$EXIST"; then
              echo "$tag $base" >> "${GITHUB_WORKSPACE}/to_build.txt"
            fi
          done < "${GITHUB_WORKSPACE}/versions.txt"

          echo "Candidates:";       cat "${GITHUB_WORKSPACE}/versions.txt" || true
          echo "Already uploaded:"; cat "$EXIST" || true
          echo "To build:";         cat "${GITHUB_WORKSPACE}/to_build.txt" || true

      - name: Prepare native files for MSVC (ARM64EC & Win32)
        shell: powershell
        run: |
          @"
          [binaries]
          c = 'cl'
          cpp = 'cl'
          ar = 'lib'
          strip = '':

          [built-in options]
          c_args = ['/Zc:preprocessor','/permissive-','/W3','/DNOMINMAX','/DWIN32_LEAN_AND_MEAN','/DVC_EXTRALEAN','/D_WIN32_WINNT=0x0A00','/arm64EC']
          cpp_args = ['/Zc:preprocessor','/permissive-','/W3','/DNOMINMAX','/DWIN32_LEAN_AND_MEAN','/DVC_EXTRALEAN','/D_WIN32_WINNT=0x0A00','/arm64EC']
          "@ | Out-File -Encoding ASCII $env:GITHUB_WORKSPACE\arm64ec.native

          @"
          [binaries]
          c = 'cl'
          cpp = 'cl'
          ar = 'lib'

          [built-in options]
          c_args = ['/Zc:preprocessor','/permissive-','/W3','/DNOMINMAX','/DWIN32_LEAN_AND_MEAN','/DVC_EXTRALEAN','/D_WIN32_WINNT=0x0A00']
          cpp_args = ['/Zc:preprocessor','/permissive-','/W3','/DNOMINMAX','/DWIN32_LEAN_AND_MEAN','/DVC_EXTRALEAN','/D_WIN32_WINNT=0x0A00']
          "@ | Out-File -Encoding ASCII $env:GITHUB_WORKSPACE\win32.native

      # ===== ARM64EC BUILD =====
      - name: MSVC DevCmd (ARM64EC)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: arm64ec

      - name: Build (ARM64EC → system32)
        shell: cmd
        env:
          PREFIX_X64: ${{ env.PREFIX_X64 }}
        run: |
          setlocal EnableExtensions EnableDelayedExpansion
          if not exist "%PREFIX_X64%" mkdir "%PREFIX_X64%"
          cd src
          meson setup "..\build.ec" --native-file "..\arm64ec.native" --buildtype release --prefix "%PREFIX_X64%"
          meson compile -C "..\build.ec" -j %NUMBER_OF_PROCESSORS%
          meson install -C "..\build.ec" --no-rebuild

      # ===== 32-bit BUILD =====
      - name: MSVC DevCmd (Win32)
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x86

      - name: Build (Win32 → syswow64)
        shell: cmd
        env:
          PREFIX_X86: ${{ env.PREFIX_X86 }}
        run: |
          setlocal EnableExtensions EnableDelayedExpansion
          if not exist "%PREFIX_X86%" mkdir "%PREFIX_X86%"
          cd src
          meson setup "..\build.w32" --native-file "..\win32.native" --buildtype release --prefix "%PREFIX_X86%"
          meson compile -C "..\build.w32" -j %NUMBER_OF_PROCESSORS%
          meson install -C "..\build.w32" --no-rebuild

      - name: Package to WCP (tar+zstd)
        shell: powershell
        run: |
          $out = "$env:GITHUB_WORKSPACE\out"; New-Item -ItemType Directory -Force -Path $out | Out-Null
          $wcpRoot = "$env:GITHUB_WORKSPACE\DXVK_WCP"; New-Item -ItemType Directory -Force -Path $wcpRoot | Out-Null
          New-Item -ItemType Directory -Force -Path "$wcpRoot\system32" | Out-Null
          New-Item -ItemType Directory -Force -Path "$wcpRoot\syswow64" | Out-Null

          Copy-Item -Force "$env:PREFIX_X64\bin\*.dll" "$wcpRoot\system32" -ErrorAction SilentlyContinue
          Copy-Item -Force "$env:PREFIX_X86\bin\*.dll" "$wcpRoot\syswow64" -ErrorAction SilentlyContinue

          $x64 = Get-ChildItem "$wcpRoot\system32" -Filter *.dll | Select-Object -ExpandProperty Name | Sort-Object
          $x86 = Get-ChildItem "$wcpRoot\syswow64" -Filter *.dll | Select-Object -ExpandProperty Name | Sort-Object
          if (-not $x64 -and -not $x86) { Write-Error "No DLLs discovered" }

          $profile = [ordered]@{
            type = "DXVK"
            versionName = "sarek-UNKNOWN"
            versionCode = 0
            description = "DXVK-Sarek arm64ec build by MSVC CI"
            files = @()
          }
          foreach ($f in $x64) { $profile.files += @{ source = "system32/$f"; target = '${system32}/' + $f } }
          foreach ($f in $x86) { $profile.files += @{ source = "syswow64/$f"; target = '${syswow64}/' + $f } }
          $profile | ConvertTo-Json -Depth 5 | Set-Content -Encoding UTF8 "$wcpRoot\profile.json"

          # Determine current version from built tag list (if any)
          $list = Get-Content "$env:GITHUB_WORKSPACE\to_build.txt" -ErrorAction SilentlyContinue
          if ($list -and $list.Length -gt 0) {
            $last = ($list | Select-Object -Last 1).Trim().Split(' ')[1]
            (Get-Content "$wcpRoot\profile.json") -replace 'sarek-UNKNOWN', "sarek-$last" | Set-Content "$wcpRoot\profile.json"
            $env:CURRENT_VER = $last
          } else {
            $env:CURRENT_VER = "manual"
          }

          Push-Location $wcpRoot
          # Create tar then zstd with 7zip
          7z a -ttar "$out\DXVK_WCP.tar" .\profile.json .\system32 .\syswow64 | Out-Null
          7z a -m0=ZSTD "$out\dxvk-sarek-arm64ec-$env:CURRENT_VER.wcp" "$out\DXVK_WCP.tar" | Out-Null
          Pop-Location

      - name: Build release notes (with Current)
        shell: powershell
        run: |
          $notes = "$env:GITHUB_WORKSPACE\RELEASE_NOTES.md"
          "`U+1F916 Automated DXVK-Sarek arm64ec builds (1.10.8+).`n" | Out-File -Encoding UTF8 $notes
          $latest = Get-ChildItem "$env:GITHUB_WORKSPACE\out" -Filter "dxvk-sarek-arm64ec-*.wcp" | Sort-Object Name | Select-Object -Last 1
          if ($latest) {
            $cur = [System.IO.Path]::GetFileNameWithoutExtension($latest.Name).Substring("dxvk-sarek-arm64ec-".Length)
            Add-Content -Encoding UTF8 $notes "Current: $cur"
          }
          Get-Content $notes

      - name: Create/Update GitHub Release (DXVK-SAREK-ARM64EC) + upload WCPs
        shell: powershell
        env:
          REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
        run: |
          $notes = "$env:GITHUB_WORKSPACE\RELEASE_NOTES.md"
          $tag = "$env:RELEASE_TAG"
          gh release view $tag --repo "$env:REPO" *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag --repo "$env:REPO" -t $tag -F $notes
          } else {
            gh release edit   $tag --repo "$env:REPO" -t $tag -F $notes
          }
          $files = Get-ChildItem "$env:GITHUB_WORKSPACE\out" -Filter *.wcp | Select-Object -ExpandProperty FullName
          if ($files) {
            gh release upload $tag $files --repo "$env:REPO" --clobber
          } else {
            echo "No new WCP files to upload."
          }

      - name: Upload build logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: meson-logs
          path: |
            ${{ github.workspace }}\build.ec\meson-logs\**
            ${{ github.workspace }}\build.w32\meson-logs\**
