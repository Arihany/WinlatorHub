name: DXVK-Sarek ARM64EC + i686 DLL Smoke Build

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    name: Build DLLs (ARM64EC + i686)
    runs-on: ubuntu-24.04
    timeout-minutes: 60
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      LLVM_MINGW_DIR: ${{ github.workspace }}/.toolchains/llvm-mingw
      OUT_DIR: ${{ github.workspace }}/out

    steps:
      - name: Prepare host packages
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            curl xz-utils jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            build-essential python3 zstd file rsync

      - name: Ensure glslang (--vn)
        run: |
          set -Eeuo pipefail
          cat > /tmp/min.comp <<'GLSL'
          #version 450
          void main() {}
          GLSL
          have() { command -v "$1" >/dev/null 2>&1 || return 1; "$1" --quiet --target-env vulkan1.3 --vn testvar -o /tmp/min.h /tmp/min.comp; }
          if have glslang; then :
          elif have glslangValidator; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          else
            echo "::error::No glslang/glslangValidator with working --vn"; exit 1
          fi

      - name: Download llvm-mingw (bylaws) — ubuntu 20.04 x86_64 ucrt
        run: |
          set -Eeuo pipefail
          API="https://api.github.com/repos/bylaws/llvm-mingw/releases/latest"
          json="$(curl -fsSL -H 'Accept: application/vnd.github+json' "$API")"
          name="$(echo "$json" | jq -r '.assets[].name' | grep -E 'ucrt-ubuntu-20\.04-x86_64\.tar\.xz$' | head -n1)"
          if [ -z "$name" ]; then
            echo "::group::Available assets"; echo "$json" | jq -r '.assets[].name'; echo "::endgroup::"
            echo "::error::ubuntu-20.04 x86_64 ucrt tar.xz asset not found"; exit 1
          fi
          url="$(echo "$json" | jq -r --arg N "$name" '.assets[] | select(.name==$N) .browser_download_url')"
          mkdir -p "$LLVM_MINGW_DIR"
          curl -fL "$url" -o /tmp/llvm-mingw.tar.xz
          tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xJf /tmp/llvm-mingw.tar.xz
          echo "$LLVM_MINGW_DIR/bin" >> "$GITHUB_PATH"

      - name: Verify toolchain & builtins
        id: tc
        run: |
          set -Eeuo pipefail
          which arm64ec-w64-mingw32-clang
          which arm64ec-w64-mingw32-clang++
          which i686-w64-mingw32-clang
          which i686-w64-mingw32-clang++
          arm64ec-w64-mingw32-clang --version

          ver="$(ls -1d "$LLVM_MINGW_DIR"/lib/clang/* | sed 's#.*/##' | sort -V | tail -n1)"
          ARM_WIN_DIR="$LLVM_MINGW_DIR/lib/clang/$ver/lib/windows"
          HELPER="$ARM_WIN_DIR/libclang_rt.builtins-arm64ec.a"
          [ -d "$ARM_WIN_DIR" ] || { echo "::error::missing $ARM_WIN_DIR"; exit 1; }
          [ -f "$HELPER" ] || { ls -la "$ARM_WIN_DIR"; echo "::error::missing $HELPER"; exit 1; }
          {
            echo "ARM_WIN_DIR=$ARM_WIN_DIR"
            echo "HELPER=$HELPER"
          } >> "$GITHUB_OUTPUT"

      - name: Clone DXVK-Sarek (sarek/main → main fallback)
        run: |
          set -Eeuo pipefail
          git clone --recurse-submodules https://github.com/${SAREK_REPO}.git src
          cd src
          if git ls-remote --exit-code --heads origin sarek/main >/dev/null 2>&1; then
            git checkout -f -t origin/sarek/main
          else
            git checkout -f main
          fi
          git submodule update --init --recursive --checkout

      - name: Write ARM64EC pre-include header (in src)
        working-directory: src
        run: |
          set -Eeuo pipefail
          cat > arm64ec-preinclude.h <<'EOF'
          #ifndef ARM64EC_PREINCLUDE_GUARD
          #define ARM64EC_PREINCLUDE_GUARD 1

          /* Disable all x86/x64 arch macros (each on its own line; no inline directives) */
          #ifdef __i386__
          #undef __i386__
          #endif

          #ifdef __i386
          #undef __i386
          #endif

          #ifdef _M_IX86
          #undef _M_IX86
          #endif

          #ifdef _X86_
          #undef _X86_
          #endif

          #ifdef __x86_64__
          #undef __x86_64__
          #endif

          #ifdef __x86_64
          #undef __x86_64
          #endif

          #ifdef __amd64__
          #undef __amd64__
          #endif

          #ifdef __amd64
          #undef __amd64
          #endif

          #ifdef _M_X64
          #undef _M_X64
          #endif

          #ifdef _M_AMD64
          #undef _M_AMD64
          #endif

          #ifdef _AMD64_
          #undef _AMD64_
          #endif

          /* Assert ARM64/ARM64EC */
          #ifndef __aarch64__
          #define __aarch64__ 1
          #endif

          #ifndef _M_ARM64
          #define _M_ARM64 1
          #endif

          #ifndef __ARM64EC__
          #define __ARM64EC__ 1
          #endif

          #ifndef _M_ARM64EC
          #define _M_ARM64EC 1
          #endif

          #ifndef __CHPE__
          #define __CHPE__ 1
          #endif

          /* Conservative: reduce inline-asm based paths in some headers */
          #ifndef __NO_INLINE__
          #define __NO_INLINE__ 1
          #endif

          #endif /* ARM64EC_PREINCLUDE_GUARD */
          EOF
          test -s arm64ec-preinclude.h

      - name: Write ARM64EC shim headers (mask x86 intrinsics on ARM64EC)
        working-directory: src
        run: |
          set -Eeuo pipefail
          mkdir -p shim
          cat > shim/x86intrin.h <<'EOF'
          /* Shim to avoid pulling x86-only intrinsics on ARM64EC builds */
          #if !defined(__ARM64EC__) && !defined(_M_ARM64EC)
          #  include_next <x86intrin.h>
          #else
          /* no-op for ARM64EC */
          #endif
          EOF
          cat > shim/immintrin.h <<'EOF'
          /* Guarded include for x86 SIMD umbrella on ARM64EC */
          #if !defined(__ARM64EC__) && !defined(_M_ARM64EC)
          #  include_next <immintrin.h>
          #else
          /* no-op for ARM64EC */
          #endif
          EOF
          echo "shim dir: $(pwd)/shim"
          ls -l shim

      - name: Write Meson cross file (ARM64EC)
        working-directory: src
        env:
          ARM_WIN_DIR: ${{ steps.tc.outputs.ARM_WIN_DIR }}
          HELPER: ${{ steps.tc.outputs.HELPER }}
        run: |
          set -Eeuo pipefail
          PREINC="$(pwd)/arm64ec-preinclude.h"
          SHIM_DIR="$(pwd)/shim"
          [ -f "$PREINC" ] || { echo "::error::missing $PREINC"; exit 1; }

          if command -v arm64ec-w64-mingw32-windres >/dev/null 2>&1; then
            WINDRES_LINE="'arm64ec-w64-mingw32-windres'"
          else
            WINDRES_LINE="'llvm-rc'"
          fi

          cat > cross.arm64ec.ini <<EOF
          [binaries]
          c = ['arm64ec-w64-mingw32-clang','-target','arm64ec-w64-mingw32']
          cpp = ['arm64ec-w64-mingw32-clang++','-target','arm64ec-w64-mingw32']
          ar = 'llvm-ar'
          strip = 'llvm-strip'
          windres = ${WINDRES_LINE}
          pkg-config = 'pkg-config'

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'

          [built-in options]
          c_args = ['-I','${SHIM_DIR}','-include','${PREINC}','-D__aarch64__=1','-D_M_ARM64=1','-D__ARM64EC__=1','-D_M_ARM64EC=1','-D__CHPE__=1','-Wno-macro-redefined','-Wno-dll-attribute-on-redeclaration','-Wno-nontrivial-memcall']
          cpp_args = ['-I','${SHIM_DIR}','-include','${PREINC}','-D__aarch64__=1','-D_M_ARM64=1','-D__ARM64EC__=1','-D_M_ARM64EC=1','-D__CHPE__=1','-Wno-macro-redefined','-Wno-dll-attribute-on-redeclaration','-Wno-nontrivial-memcall']
          c_link_args = ['-fuse-ld=lld','-Wl,/machine:arm64ec','-L','${ARM_WIN_DIR}','-Wl,--whole-archive,${HELPER},--no-whole-archive']
          cpp_link_args = ['-fuse-ld=lld','-Wl,/machine:arm64ec','-L','${ARM_WIN_DIR}','-Wl,--whole-archive,${HELPER},--no-whole-archive']

          [properties]
          needs_exe_wrapper = true
          EOF

          echo "== cross.arm64ec.ini =="
          cat cross.arm64ec.ini

      - name: Write Meson cross file (i686)
        working-directory: src
        run: |
          set -Eeuo pipefail
          if command -v i686-w64-mingw32-windres >/dev/null 2>&1; then
            WINDRES_LINE="'i686-w64-mingw32-windres'"
          else
            WINDRES_LINE="'llvm-rc'"
          fi

          cat > cross.i686.ini <<EOF
          [binaries]
          c = ['i686-w64-mingw32-clang']
          cpp = ['i686-w64-mingw32-clang++']
          ar = 'llvm-ar'
          strip = 'llvm-strip'
          windres = ${WINDRES_LINE}
          pkg-config = 'pkg-config'

          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF

          echo "== cross.i686.ini =="
          cat cross.i686.ini

      - name: Build (ARM64EC)
        working-directory: src
        env:
          PREFIX: ${{ env.OUT_DIR }}/arm64ec
          # 안전벨트: shim 경로를 환경변수에도 주입
          CPLUS_INCLUDE_PATH: ${{ github.workspace }}/src/shim:$CPLUS_INCLUDE_PATH
          C_INCLUDE_PATH: ${{ github.workspace }}/src/shim:$C_INCLUDE_PATH
        run: |
          set -Eeuo pipefail
          rm -rf build.arm64ec "$PREFIX"
          if ! meson setup build.arm64ec \
            --cross-file cross.arm64ec.ini \
            --buildtype release \
            --prefix "$PREFIX" \
            -Dbuild_id=false -Dstrip=true; then
            echo "==== meson-log.txt (ARM64EC) ===="
            sed -n '1,200p' build.arm64ec/meson-logs/meson-log.txt || true
            exit 1
          fi
          ninja -v -C build.arm64ec -j"$(nproc)"
          meson install --no-rebuild -C build.arm64ec

      - name: Build (i686)
        working-directory: src
        env:
          PREFIX: ${{ env.OUT_DIR }}/i686
        run: |
          set -Eeuo pipefail
          rm -rf build.i686 "$PREFIX"
          if ! meson setup build.i686 \
            --cross-file cross.i686.ini \
            --buildtype release \
            --prefix "$PREFIX" \
            -Dbuild_id=false -Dstrip=true; then
            echo "==== meson-log.txt (i686) ===="
            sed -n '1,200p' build.i686/meson-logs/meson-log.txt || true
            exit 1
          fi
          ninja -v -C build.i686 -j"$(nproc)"
          meson install --no-rebuild -C build.i686

      - name: Quick sanity — print PE headers
        run: |
          set -Eeuo pipefail
          echo "== ARM64EC DLLs =="
          find "${OUT_DIR}/arm64ec/bin" -maxdepth 1 -name '*.dll' -print0 | xargs -0 -I{} sh -c 'echo "# {}"; llvm-readobj -file-headers "{}" | sed -n "1,6p"'
          echo "== i686 DLLs =="
          find "${OUT_DIR}/i686/bin" -maxdepth 1 -name '*.dll' -print0 | xargs -0 -I{} sh -c 'echo "# {}"; llvm-readobj -file-headers "{}" | sed -n "1,6p"'

      - name: Upload artifact (ARM64EC DLLs)
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec-dlls
          path: ${{ env.OUT_DIR }}/arm64ec/bin/*.dll
          if-no-files-found: error
          retention-days: 7

      - name: Upload artifact (i686 DLLs)
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-i686-dlls
          path: ${{ env.OUT_DIR }}/i686/bin/*.dll
          if-no-files-found: error
          retention-days: 7
