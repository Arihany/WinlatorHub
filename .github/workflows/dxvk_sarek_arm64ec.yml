name: build-dxvk-sarek-arm64ec

on:
  workflow_dispatch:

env:
  # Upstream SAREK repo & fixed ARM64EC toolchain
  UPSTREAM_REPO: pythonlover02/DXVK-Sarek
  TOOLCHAIN_URL: https://github.com/bylaws/llvm-mingw/releases/download/20250305/llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64.tar.xz

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout this repo (workflow)
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ninja-build meson python3 \
            glslang-tools ca-certificates curl xz-utils \
            pkgconf jq git

      - name: Resolve latest release tag on 'main' (upstream)
        id: rel
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          api="https://api.github.com/repos/${{ env.UPSTREAM_REPO }}"
          # Prefer the most recent published release that targets 'main'
          tag=$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" "$api/releases" \
            | jq -r '[.[] | select(.draft==false and .prerelease==false and .target_commitish=="main")] 
                      | (max_by(.created_at//.published_at) | .tag_name) // ""')
          if [ -z "$tag" ]; then
            # Fallback to 'latest'
            tag=$(curl -fsSL -H "Authorization: Bearer ${GH_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" "$api/releases/latest" \
              | jq -r '.tag_name // ""')
          fi
          [ -n "$tag" ] || { echo "::error::Failed to resolve a release tag for ${{ env.UPSTREAM_REPO }}"; exit 1; }
          echo "Resolved tag: $tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Checkout upstream DXVK-Sarek (release tag)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ steps.rel.outputs.tag }}
          submodules: recursive
          fetch-depth: 0
          path: dxvk

      - name: Download ARM64EC llvm-mingw toolchain (bylaws)
        run: |
          set -euo pipefail
          mkdir -p "$HOME/toolchain"
          curl -L "${{ env.TOOLCHAIN_URL }}" -o /tmp/llvm-mingw.tar.xz
          tar -xJf /tmp/llvm-mingw.tar.xz -C "$HOME/toolchain" --strip-components=1
          echo "$HOME/toolchain/bin" >> "$GITHUB_PATH"

      - name: Show toolchain info (diagnostics)
        run: |
          set -euo pipefail
          which arm64ec-w64-mingw32-g++
          arm64ec-w64-mingw32-g++ --version
          # Include search paths (useful for header issues)
          arm64ec-w64-mingw32-g++ -v -E -x c++ /dev/null || true

      - name: Generate Meson cross file for ARM64EC
        working-directory: dxvk
        run: |
          set -euo pipefail
          cat > arm64ec.meson <<'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = 'arm64ec-w64-mingw32-gcc'
          cpp = 'arm64ec-w64-mingw32-g++'
          ld = 'arm64ec-w64-mingw32-ld'
          windres = 'arm64ec-w64-mingw32-windres'
          widl = 'arm64ec-w64-mingw32-widl'
          strip = 'llvm-strip'

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'

          [built-in options]
          c_args = ['-D__SSE__=0','-D__SSE2__=0','-D__SSE3__=0','-D__SSSE3__=0','-D__SSE4_1__=0','-D__SSE4_2__=0','-D__AVX__=0','-D__AVX2__=0']
          cpp_args = ['-D__SSE__=0','-D__SSE2__=0','-D__SSE3__=0','-D__SSSE3__=0','-D__SSE4_1__=0','-D__SSE4_2__=0','-D__AVX__=0','-D__AVX2__=0']
          EOF
          echo "== arm64ec.meson ==" && nl -ba arm64ec.meson

      - name: Preflight macros (diagnostics)
        run: |
          set -euo pipefail
          arm64ec-w64-mingw32-g++ -dM -E - < /dev/null | \
            egrep -E '__arm64ec__|_M_ARM64EC|__x86_64__|_M_X64|_M_AMD64' || true

      # --- SAREK-SPECIFIC PATCH START ---
      # SAREK 전용: ARM64EC에서 x86 인트린식/SSE 경로가 활성화되는 문제를 빌드 직전에 차단
      - name: Patch SAREK headers to avoid x86 intrinsics on ARM64EC
        working-directory: dxvk
        run: |
          set -euo pipefail

          # -------- A) ARM64EC 프롤로그 주입 (문제 파일만) --------
          ARM64EC_PROLOG='#if defined(__arm64ec__) || defined(_M_ARM64EC)
            /* SAREK on ARM64EC: disable x86/SSE/AVX paths */
            #undef __x86_64__
            #undef _M_X64
            #undef _M_AMD64
            #undef __i386__
            #undef _M_IX86
            #undef __SSE__
            #undef __SSE2__
            #undef __SSE3__
            #undef __SSSE3__
            #undef __SSE4_1__
            #undef __SSE4_2__
            #undef __AVX__
            #undef __AVX2__
          #endif
          '

          for f in src/util/util_vector.h src/util/util_bit.h; do
            if [ -f "$f" ] && ! grep -q 'SAREK on ARM64EC: disable x86/SSE/AVX' "$f"; then
              echo "Injecting ARM64EC prolog into: $f"
              tmp=$(mktemp)
              printf "%s\n" "$ARM64EC_PROLOG" > "$tmp"
              cat "$f" >> "$tmp"
              mv "$tmp" "$f"
            fi
          done

          # -------- B) 치환 패치: x86 인트린식 include/아키텍처 가드 --------
          #   - 범위를 DXVK 소스/헤더로만 한정
          #   - 외부 서드파티는 제외(특히 include/vulkan, include/spirv)
          find src include -type f \( -name '*.h' -o -name '*.hpp' -o -name '*.c' -o -name '*.cpp' -o -name '*.inl' \) \
            -not -path 'include/vulkan/*' -not -path 'include/spirv/*' > __filelist.txt

          mapfile -t HDR_FILES < <(grep -RIl -E '#\s*include\s*<(x86intrin|x86gprintrin|immintrin|intrin)\.h>' --file=__filelist.txt 2>/dev/null || true)
          for f in "${HDR_FILES[@]}"; do
            echo "Patching includes in: $f"
            sed -i -E \
              's@(#\s*include\s*<)(x86intrin|x86gprintrin|immintrin|intrin)\.h>@#if !defined(__arm64ec__) \&\& !defined(_M_ARM64EC)\n\1\2.h>\n#endif@g' \
              "$f"
          done

          mapfile -t COND_FILES < <(grep -RIl -E 'defined\((__x86_64__|_M_X64|_M_AMD64|__i386__|_M_IX86)\)' --file=__filelist.txt 2>/dev/null || true)
          for f in "${COND_FILES[@]}"; do
            echo "Patching arch guards in: $f"
            sed -i -E \
              's@defined\((__x86_64__|_M_X64|_M_AMD64|__i386__|_M_IX86)\)@defined(\1) \&\& !defined(__arm64ec__) \&\& !defined(_M_ARM64EC)@g' \
              "$f"
          done

          # -------- C) 검증: 전처리/컴파일러 기반으로 확인 (텍스트 grep 금지) --------
          # inc_test.cpp는 최소한의 유틸 헤더만 포함
          cat > __inc_test.cpp <<'INC'
          #include "src/util/util_bit.h"
          #include "src/util/util_vector.h"
          INC

          # 공통 빌드 플래그를 최대한 반영
          CXX=arm64ec-w64-mingw32-g++
          CXXFLAGS="-E -x c++ -std=c++17 -D_FILE_OFFSET_BITS=64 -D_WIN32_WINNT=0x0A00 -DDXVK_WSI_WIN32 -I. -Isrc -Iinclude"

          # 1) 1차: -H 지원 시 include 트리 검사
          if $CXX $CXXFLAGS -H __inc_test.cpp -o /dev/null 2> __inc_tree.log; then
            tail -n 120 __inc_tree.log || true
            if egrep -q '/(x86intrin|immintrin|intrin)\.h' __inc_tree.log; then
              echo "::error::Compiler still includes x86 intrinsics headers under ARM64EC"; exit 1
            fi
          else
            echo "note: -H failed or preprocessing failed, trying dependency scan fallback..."
            # 2) 폴백: 의존성 목록(-MMD -MF)으로 포함 헤더를 확인
            $CXX -MMD -MF __inc_deps.d -MP -MT dummy $CXXFLAGS __inc_test.cpp -o /dev/null 2> __inc_dep_err.log || true
            cat __inc_dep_err.log || true
            if [ -f __inc_deps.d ] && egrep -q '(x86intrin|immintrin|intrin)\.h' __inc_deps.d; then
              echo "::error::Deps show x86 intrinsics headers"; cat __inc_deps.d; exit 1
            fi
          fi

          # 참고 diff
          git --no-pager diff -- src/ include/ | sed -n '1,200p' || true
      # --- SAREK-SPECIFIC PATCH END ---

      - name: Wipe build dir
        working-directory: dxvk
        run: |
          [ -d build.w64 ] && rm -rf build.w64
          [ -d install   ] && rm -rf install

      - name: "Preflight: meson.build presence"
        working-directory: dxvk
        run: |
          set -euo pipefail
          test -f meson.build || { echo "::error::meson.build not found in $PWD"; ls -la; exit 1; }

      - name: Configure (Meson)
        working-directory: dxvk
        run: |
          set -euo pipefail
          meson setup build.w64 . --cross-file arm64ec.meson --buildtype release --prefix "$PWD/install"
          # Optional: inspect options
          meson configure build.w64

      - name: Build
        working-directory: dxvk
        run: |
          set -euo pipefail
          meson compile -C build.w64 -v

      - name: Install into staging dir
        working-directory: dxvk
        run: |
          set -euo pipefail
          meson install -C build.w64

      - name: Upload DLL artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec-dlls
          path: |
            dxvk/install/bin/*.dll
            dxvk/install/bin/*.pdb
          if-no-files-found: error

      - name: Upload build logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec-logs
          path: |
            dxvk/build.w64/meson-logs/**
            dxvk/build.w64/meson-info/**
            dxvk/meson-logs/**
            dxvk/arm64ec.meson
          if-no-files-found: warn
