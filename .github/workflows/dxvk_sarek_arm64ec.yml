name: Build DXVK-Sarek (arm64ec + i686) — quick DLL test

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      TOOLCHAIN_DIR: ${{ github.workspace }}/.toolchains
      LLVM_MINGW_DIR: ${{ github.workspace }}/.toolchains/llvm-mingw
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Install host tools
        run: |
          set -Eeuo pipefail
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            curl xz-utils zstd jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            python3 build-essential file

          # glslangValidator만 있어도 --vn 대체 가능: 래퍼 링크
          if command -v glslangValidator >/dev/null && ! command -v glslang >/dev/null; then
            mkdir -p "$HOME/.local/bin"
            ln -sf "$(command -v glslangValidator)" "$HOME/.local/bin/glslang"
            echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          fi

      - name: Fetch bylaws/llvm-mingw cross toolchain (Linux x86_64)
        id: tc
        run: |
          set -Eeuo pipefail

          pick_url() {
            local page=1 url=""
            while [ $page -le 5 ]; do
              json="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" \
                              -H "Accept: application/vnd.github+json" \
                              "https://api.github.com/repos/bylaws/llvm-mingw/releases?per_page=100&page=${page}")"
              # 리눅스 x86_64용 UCRT 크로스(ubuntu 기반) tar.* 를 선호
              url="$(echo "$json" | jq -r '
                .[]?.assets[]?
                | select(
                    (.name|test("ubuntu";"i")) and
                    (.name|test("x86_64";"i")) and
                    (.name|test("\\.(tar\\.(zst|xz|gz)|t(z|x|g)z)$";"i"))
                  )
                | .browser_download_url
              ' | head -n1)"
              [ -n "$url" ] && { echo "$url"; return 0; }
              page=$((page+1))
            done
            return 1
          }

          url="$(pick_url || true)"

          # 폴백: ARM64EC 스크립트가 포함된 것으로 알려진 20240929 태그
          if [ -z "${url:-}" ]; then
            json="$(curl -fsSL -H "Authorization: Bearer $GH_TOKEN" \
                            -H "Accept: application/vnd.github+json" \
                            "https://api.github.com/repos/bylaws/llvm-mingw/releases/tags/20240929")"
            url="$(echo "$json" | jq -r '
              .assets[]?
              | select(
                  (.name|test("ubuntu";"i")) and
                  (.name|test("x86_64";"i")) and
                  (.name|test("\\.(tar\\.(zst|xz|gz)|t(z|x|g)z)$";"i"))
                )
              | .browser_download_url
            ' | head -n1)"
          fi

          if [ -z "${url:-}" ]; then
            echo "::group::No suitable llvm-mingw asset found. Recent asset names:"
            curl -fsSL -H "Accept: application/vnd.github+json" \
                 "https://api.github.com/repos/bylaws/llvm-mingw/releases?per_page=30&page=1" \
              | jq -r '.[]?.assets[]?.name'
            echo "::endgroup::"
            echo "::error::llvm-mingw linux x86_64 tarball not found"
            exit 1
          fi

          echo "url=$url" >> "$GITHUB_OUTPUT"

          mkdir -p "$LLVM_MINGW_DIR"
          f=/tmp/llvm-mingw.any.tar
          curl -fL "$url" -o "$f"

          case "$url" in
            *.tar.zst|*.tzst) tar -C "$LLVM_MINGW_DIR" --strip-components=1 --zstd -xvf "$f" ;;
            *.tar.xz|*.txz)  tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xJf  "$f" ;;
            *.tar.gz|*.tgz)  tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xzf  "$f" ;;
            *) echo "::error::Unknown archive format: $url"; exit 1 ;;
          esac

          echo "$LLVM_MINGW_DIR/bin" >> "$GITHUB_PATH"

          # ARM64EC 래퍼/툴 존재 확인
          need=(arm64ec-w64-mingw32-clang arm64ec-w64-mingw32-ar arm64ec-w64-mingw32-windres)
          for b in "${need[@]}"; do
            if ! command -v "$b" >/dev/null 2>&1; then
              echo "::warning::$b not found in toolchain. Will try llvm-rc fallback for windres."
            fi
          done

          # i686도 함께 사용할 것이므로 확인
          for b in i686-w64-mingw32-clang i686-w64-mingw32-ar; do
            command -v "$b" >/dev/null || { echo "::error::$b not found in toolchain"; exit 1; }
          done

      - name: Clone DXVK-Sarek (main)
        run: |
          set -Eeuo pipefail
          git clone --recurse-submodules "https://github.com/${SAREK_REPO}.git" src
          cd src
          git checkout -f main
          git submodule update --init --recursive --checkout

      - name: Create Meson cross files (ARM64EC & i686)
        working-directory: src
        run: |
          set -Eeuo pipefail

          cat > cross-arm64ec.txt <<'EOF'
          [binaries]
          c = 'arm64ec-w64-mingw32-clang'
          cpp = 'arm64ec-w64-mingw32-clang++'
          ar = 'arm64ec-w64-mingw32-ar'
          # windres 없으면 llvm-rc로 대체
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkgconfig = 'pkg-config'

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF

          # windres 대체
          if ! command -v arm64ec-w64-mingw32-windres >/dev/null && command -v llvm-rc >/dev/null; then
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-arm64ec.txt
          fi

          cat > cross-i686.txt <<'EOF'
          [binaries]
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          ar = 'i686-w64-mingw32-ar'
          windres = 'i686-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkgconfig = 'pkg-config'

          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF

          if ! command -v i686-w64-mingw32-windres >/dev/null && command -v llvm-rc >/divnull; then
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-i686.txt
          fi

      - name: Build (ARM64EC)
        working-directory: src
        run: |
          set -Eeuo pipefail
          meson setup "$GITHUB_WORKSPACE/build.arm64ec" \
            --cross-file cross-arm64ec.txt \
            --buildtype release \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "$GITHUB_WORKSPACE/build.arm64ec" -j"$(nproc)"

      - name: Build (i686)
        working-directory: src
        run: |
          set -Eeuo pipefail
          meson setup "$GITHUB_WORKSPACE/build.i686" \
            --cross-file cross-i686.txt \
            --buildtype release \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "$GITHUB_WORKSPACE/build.i686" -j"$(nproc)"

      - name: Collect DLLs
        run: |
          set -Eeuo pipefail
          mkdir -p out/arm64ec out/i686
          find build.arm64ec -type f -name '*.dll' -exec cp -v {} out/arm64ec/ \; || true
          find build.i686   -type f -name '*.dll' -exec cp -v {} out/i686/    \; || true

          echo "ARM64EC DLLs:"; ls -1 out/arm64ec || true
          echo "i686 DLLs:";   ls -1 out/i686   || true

          # 둘 다 비어있다면 실패로 처리
          if [ -z "$(find out/arm64ec -name '*.dll' -print -quit)" ] && \
             [ -z "$(find out/i686   -name '*.dll' -print -quit)" ]; then
            echo "::error::No DLLs produced"; exit 1
          fi

      - name: Upload artifact (arm64ec)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec
          path: out/arm64ec
          if-no-files-found: warn
          compression-level: 6

      - name: Upload artifact (i686)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-i686
          path: out/i686
          if-no-files-found: warn
          compression-level: 6
