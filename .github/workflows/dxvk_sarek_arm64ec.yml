name: Build DXVK-Sarek (arm64ec + i686) — quick DLL test

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      TOOLCHAIN_DIR: ${{ github.workspace }}/.toolchains
      LLVM_MINGW_DIR: ${{ github.workspace }}/.toolchains/llvm-mingw
      ARM64_ASSET_NAME: llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64.tar.xz

    steps:
      - name: Install build deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            curl xz-utils zstd jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            python3 build-essential file

          # glslangValidator만 있을 때 --vn 대체 래퍼
          if command -v glslangValidator >/dev/null && ! command -v glslang >/dev/null; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          fi

      - name: Download bylaws llvm-mingw (exact asset)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          mkdir -p "$LLVM_MINGW_DIR"
          API="https://api.github.com/repos/bylaws/llvm-mingw/releases/latest"
          json="$(curl -fsSL -H "Accept: application/vnd.github+json" "$API")"
          url="$(echo "$json" | jq -r --arg N "$ARM64_ASSET_NAME" '.assets[] | select(.name==$N) .browser_download_url')"
          if [ -z "$url" ] || [ "$url" = "null" ]; then
            echo "::group::Available assets in latest release"
            echo "$json" | jq -r '.assets[].name'
            echo "::endgroup::"
            echo "::error::Asset $ARM64_ASSET_NAME not found in latest release"
            exit 1
          fi
          echo "Chosen: $url"
          f=/tmp/llvm-mingw.tar.xz
          curl -fL "$url" -o "$f"
          tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xJf "$f"
          echo "$LLVM_MINGW_DIR/bin" >> "$GITHUB_PATH"

          # 기대 도구 확인 (없으면 에러)
          need_bins=(arm64ec-w64-mingw32-clang arm64ec-w64-mingw32-clang++ i686-w64-mingw32-clang i686-w64-mingw32-clang++)
          for b in "${need_bins[@]}"; do
            command -v "$b" >/dev/null || { echo "::error::missing tool: $b"; exit 1; }
          done
          # 보조 도구 경고만
          for b in arm64ec-w64-mingw32-windres i686-w64-mingw32-windres llvm-rc llvm-strip llvm-ar; do
            command -v "$b" >/dev/null || echo "::warning::missing (will fallback if possible): $b"
          done

      - name: Clone DXVK-Sarek (main + submodules)
        run: |
          git clone --recurse-submodules "https://github.com/${SAREK_REPO}.git" src
          cd src
          git fetch --force
          git checkout -f main
          git submodule update --init --recursive --checkout

      - name: Create Meson cross files (ARM64EC & i686)
        working-directory: src
        run: |
          # ARM64EC
          cat > cross-arm64ec.txt <<'EOF'
          [binaries]
          c = 'arm64ec-w64-mingw32-clang'
          cpp = 'arm64ec-w64-mingw32-clang++'
          ar = 'arm64ec-w64-mingw32-ar'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkgconfig = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          # windres 없으면 llvm-rc로 대체
          command -v arm64ec-w64-mingw32-windres >/dev/null || \
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-arm64ec.txt

          # i686
          cat > cross-i686.txt <<'EOF'
          [binaries]
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          ar = 'i686-w64-mingw32-ar'
          windres = 'i686-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkgconfig = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF
          command -v i686-w64-mingw32-windres >/dev/null || \
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-i686.txt

      - name: Build ARM64EC (DLLs)
        working-directory: src
        env:
          PREFIX_ARM64EC: ${{ github.workspace }}/dist-arm64ec
        run: |
          meson setup "$GITHUB_WORKSPACE/build.arm64ec" \
            --cross-file cross-arm64ec.txt \
            --buildtype release \
            --prefix "$PREFIX_ARM64EC" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "$GITHUB_WORKSPACE/build.arm64ec" -j"$(nproc)"
          meson install --no-rebuild -C "$GITHUB_WORKSPACE/build.arm64ec"

      - name: Build i686 (DLLs)
        working-directory: src
        env:
          PREFIX_I686: ${{ github.workspace }}/dist-i686
        run: |
          meson setup "$GITHUB_WORKSPACE/build.i686" \
            --cross-file cross-i686.txt \
            --buildtype release \
            --prefix "$PREFIX_I686" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "$GITHUB_WORKSPACE/build.i686" -j"$(nproc)"
          meson install --no-rebuild -C "$GITHUB_WORKSPACE/build.i686"

      - name: Collect DLLs
        run: |
          mkdir -p out/arm64ec out/i686
          cp -v "$GITHUB_WORKSPACE"/dist-arm64ec/bin/*.dll out/arm64ec/ || true
          cp -v "$GITHUB_WORKSPACE"/dist-i686/bin/*.dll  out/i686/    || true

          echo "ARM64EC DLLs:"; ls -1 out/arm64ec || true
          echo "i686 DLLs:";   ls -1 out/i686   || true

          if [ -z "$(find out/arm64ec -name '*.dll' -print -quit)" ] && \
             [ -z "$(find out/i686   -name '*.dll' -print -quit)" ]; then
            echo "::error::No DLLs produced"; exit 1
          fi

      - name: Upload artifact (arm64ec)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec
          path: out/arm64ec
          if-no-files-found: warn
          compression-level: 6

      - name: Upload artifact (i686)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-i686
          path: out/i686
          if-no-files-found: warn
          compression-level: 6
