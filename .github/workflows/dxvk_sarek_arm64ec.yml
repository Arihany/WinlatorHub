name: Build DXVK-Sarek (arm64ec + i686) — quick DLL test

on:
  workflow_dispatch:

permissions:
  contents: read

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 45
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      LLVM_MINGW_DIR: ${{ github.workspace }}/.toolchains/llvm-mingw
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: Install build deps
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            curl xz-utils zstd jq ca-certificates \
            git meson ninja-build glslang-tools pkg-config \
            python3 build-essential file

          # glslangValidator만 있을 때 --vn 대체용 래퍼
          if command -v glslangValidator >/dev/null && ! command -v glslang >/dev/null; then
            BIN="$HOME/.local/bin"; mkdir -p "$BIN"
            ln -sf "$(command -v glslangValidator)" "$BIN/glslang"
            echo "$BIN" >> "$GITHUB_PATH"
          fi

      - name: Download bylaws llvm-mingw (by release title = date; 20.04 only)
        run: |
          set -Eeuo pipefail
          mkdir -p "$LLVM_MINGW_DIR"

          API="https://api.github.com/repos/bylaws/llvm-mingw/releases/latest"
          json="$(curl -fsSL -H 'Accept: application/vnd.github+json' -H "Authorization: Bearer $GH_TOKEN" "$API")"

          # 릴리스 제목(=날짜)에서 숫자만 추출 (예: "20250305")
          DATE="$(echo "$json" | jq -r '.name' | sed 's/[^0-9]//g')"
          [ -n "$DATE" ] || { echo "::error::Failed to parse release date (title)"; exit 1; }

          # 정확히 20.04 자산만 선택
          cand="llvm-mingw-${DATE}-ucrt-ubuntu-20.04-x86_64.tar.xz"
          url="$(echo "$json" | jq -r --arg N "$cand" '.assets[] | select(.name==$N) .browser_download_url')"

          # 같은 날짜에서 ubuntu x86_64 tar.* 임의 선택(해당 리포는 20.04만 배포한다고 하셨으니 여전히 안전)
          if [ -z "$url" ] || [ "$url" = "null" ]; then
            url="$(echo "$json" | jq -r --arg D "$DATE" '
              .assets[] |
              select((.name|test($D)) and (.name|test("ubuntu.*x86_64\\.(tar\\.(xz|zst|gz)|t(z|x|g)z)$";"i"))) |
              .browser_download_url' | head -n1)"
          fi

          if [ -z "$url" ] || [ "$url" = "null" ]; then
            echo "::group::Available assets in latest"
            echo "$json" | jq -r '.assets[].name'
            echo "::endgroup::"
            echo "::error::No matching llvm-mingw 20.04 asset for date $DATE"
            exit 1
          fi

          echo "Chosen: $url"
          f=/tmp/llvm-mingw.tar.any
          curl -fL "$url" -o "$f"

          case "$url" in
            *.tar.xz|*.txz)   tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xJf  "$f" ;;
            *.tar.zst|*.tzst) tar -C "$LLVM_MINGW_DIR" --strip-components=1 --zstd -xvf "$f" ;;
            *.tar.gz|*.tgz)   tar -C "$LLVM_MINGW_DIR" --strip-components=1 -xzf  "$f" ;;
            *) echo "::error::Unknown archive format: $url"; exit 1 ;;
          esac

          # PATH: 다음 스텝 + 현재 스텝 둘 다 반영
          echo "$LLVM_MINGW_DIR/bin" >> "$GITHUB_PATH"
          export PATH="$LLVM_MINGW_DIR/bin:$PATH"
          hash -r

          # 필수 바이너리 빠르게 점검 (ARM64EC + i686)
          need=(arm64ec-w64-mingw32-clang arm64ec-w64-mingw32-clang++ i686-w64-mingw32-clang i686-w64-mingw32-clang++)
          for b in "${need[@]}"; do
            command -v "$b" >/dev/null || { echo "::error::missing tool: $b"; exit 1; }
          done

          # windres가 없으면 나중에 llvm-rc로 대체
          for b in arm64ec-w64-mingw32-windres i686-w64-mingw32-windres llvm-rc llvm-strip llvm-ar; do
            command -v "$b" >/dev/null || echo "::warning::missing (will fallback if possible): $b"
          done

      - name: Clone DXVK-Sarek (main + submodules)
        run: |
          set -Eeuo pipefail
          git clone --recurse-submodules "https://github.com/${SAREK_REPO}.git" src
          cd src
          git fetch --force
          git checkout -f main
          git submodule update --init --recursive --checkout

      - name: Patch for ARM64EC: guard x86 intrinsics includes
        working-directory: src
        run: |
          set -Eeuo pipefail
          # x86 전용 헤더(include <x86intrin.h>, <immintrin.h>)를 x86/AMD64에서만 포함하도록 가드
          mapfile -t files < <(grep -RIl --include='*.h' -e '^#include <x86intrin.h>' -e '^#include <immintrin.h>' ./src || true)
          wrap() {
            local f="$1" inc="$2"
            [ -f "$f" ] || return 0
            awk -v inc="$inc" '
              {
                if ($0 == "#include <"inc">") {
                  print "#if defined(__i386__) || defined(__x86_64__) || defined(_M_IX86) || defined(_M_X64)";
                  print "#include <"inc">";
                  print "#endif";
                } else { print $0 }
              }' "$f" > "$f.new" && mv "$f.new" "$f"
          }
          for f in "${files[@]}"; do
            wrap "$f" "x86intrin.h"
            wrap "$f" "immintrin.h"
          done

      - name: Create Meson cross files (ARM64EC & i686)
        working-directory: src
        run: |
          set -Eeuo pipefail

          # ARM64EC (pkg-config 키 하이픈 표기로 교정)
          cat > cross-arm64ec.txt <<'EOF'
          [binaries]
          c = 'arm64ec-w64-mingw32-clang'
          cpp = 'arm64ec-w64-mingw32-clang++'
          ar = 'arm64ec-w64-mingw32-ar'
          windres = 'arm64ec-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          command -v arm64ec-w64-mingw32-windres >/dev/null || \
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-arm64ec.txt

          # i686
          cat > cross-i686.txt <<'EOF'
          [binaries]
          c = 'i686-w64-mingw32-clang'
          cpp = 'i686-w64-mingw32-clang++'
          ar = 'i686-w64-mingw32-ar'
          windres = 'i686-w64-mingw32-windres'
          strip = 'llvm-strip'
          pkg-config = 'pkg-config'
          [host_machine]
          system = 'windows'
          cpu_family = 'x86'
          cpu = 'i686'
          endian = 'little'
          EOF
          command -v i686-w64-mingw32-windres >/dev/null || \
            sed -i "s|^windres = .*|windres = 'llvm-rc'|" cross-i686.txt

      - name: Build ARM64EC (DLLs)
        working-directory: src
        env:
          PREFIX_ARM64EC: ${{ github.workspace }}/dist-arm64ec
        run: |
          set -Eeuo pipefail
          meson setup "$GITHUB_WORKSPACE/build.arm64ec" \
            --cross-file cross-arm64ec.txt \
            --buildtype release \
            --prefix "$PREFIX_ARM64EC" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall -D__ARM64EC__=1 -D_M_ARM64EC=1' \
            -Dcpp_args='-Wno-nontrivial-memcall -D__ARM64EC__=1 -D_M_ARM64EC=1'
          ninja -C "$GITHUB_WORKSPACE/build.arm64ec" -j"$(nproc)"
          meson install --no-rebuild -C "$GITHUB_WORKSPACE/build.arm64ec"

      - name: Build i686 (DLLs)
        working-directory: src
        env:
          PREFIX_I686: ${{ github.workspace }}/dist-i686
        run: |
          set -Eeuo pipefail
          meson setup "$GITHUB_WORKSPACE/build.i686" \
            --cross-file cross-i686.txt \
            --buildtype release \
            --prefix "$PREFIX_I686" \
            -Dbuild_id=false -Dstrip=true \
            -Dc_args='-Wno-nontrivial-memcall' \
            -Dcpp_args='-Wno-nontrivial-memcall'
          ninja -C "$GITHUB_WORKSPACE/build.i686" -j"$(nproc)"
          meson install --no-rebuild -C "$GITHUB_WORKSPACE/build.i686"

      - name: Collect DLLs
        run: |
          set -Eeuo pipefail
          mkdir -p out/arm64ec out/i686
          cp -v "$GITHUB_WORKSPACE"/dist-arm64ec/bin/*.dll out/arm64ec/ || true
          cp -v "$GITHUB_WORKSPACE"/dist-i686/bin/*.dll  out/i686/    || true

          echo "ARM64EC DLLs:"; ls -1 out/arm64ec || true
          echo "i686 DLLs:";   ls -1 out/i686   || true

          # 둘 다 비어 있으면 실패 처리
          if [ -z "$(find out/arm64ec -name '*.dll' -print -quit)" ] && \
             [ -z "$(find out/i686   -name '*.dll' -print -quit)" ]; then
            echo "::error::No DLLs produced"; exit 1
          fi

      - name: Upload artifact (arm64ec)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec
          path: out/arm64ec
          if-no-files-found: warn
          compression-level: 6

      - name: Upload artifact (i686)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-i686
          path: out/i686
          if-no-files-found: warn
          compression-level: 6
