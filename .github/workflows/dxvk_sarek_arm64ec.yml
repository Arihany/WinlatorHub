name: build-dxvk-sarek-arm64ec

on:
  workflow_dispatch:

env:
  TOOLCHAIN_URL: "https://github.com/bylaws/llvm-mingw/releases/download/20250305/llvm-mingw-20250305-ucrt-ubuntu-20.04-x86_64.tar.xz"
  UPSTREAM_REPO: pythonlover02/DXVK-Sarek

jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout this repo (workflow)
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ninja-build meson python3 \
            glslang-tools ca-certificates curl xz-utils pkgconf git

      - name: Resolve latest release tag on 'main' (upstream)
        id: rel
        run: |
          set -euo pipefail
          sudo apt-get update && sudo apt-get install -y --no-install-recommends jq
          api="https://api.github.com/repos/${{ env.UPSTREAM_REPO }}"
          tag=$(curl -fsSL -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" "$api/releases" \
            | jq -r '[.[] | select(.draft==false and .prerelease==false and .target_commitish=="main")] 
                      | (max_by(.created_at//.published_at) | .tag_name) // ""')
          if [ -z "$tag" ]; then
            tag=$(curl -fsSL -H "Authorization: Bearer ${{ github.token }}" -H "X-GitHub-Api-Version: 2022-11-28" "$api/releases/latest" \
              | jq -r '.tag_name // ""')
          fi
          [ -n "$tag" ] || { echo "::error::Failed to resolve a release tag"; exit 1; }
          echo "Resolved tag: $tag"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Checkout upstream DXVK-Sarek source (release tag)
        uses: actions/checkout@v4
        with:
          repository: ${{ env.UPSTREAM_REPO }}
          ref: ${{ steps.rel.outputs.tag }}
          submodules: recursive
          fetch-depth: 0
          path: dxvk

      - name: Download ARM64EC llvm-mingw toolchain (bylaws)
        env:
          URL: ${{ env.TOOLCHAIN_URL }}
        run: |
          set -euxo pipefail
          mkdir -p "$HOME/toolchain"
          curl -L "$URL" -o /tmp/llvm-mingw.tar.xz
          tar -xJf /tmp/llvm-mingw.tar.xz -C "$HOME/toolchain" --strip-components=1
          echo "$HOME/toolchain/bin" >> "$GITHUB_PATH"
          arm64ec-w64-mingw32-gcc --version || true

      - name: Generate Meson cross file for ARM64EC
        working-directory: dxvk
        run: |
          cat > arm64ec.meson <<'EOF'
          [binaries]
          ar = 'arm64ec-w64-mingw32-ar'
          c = 'arm64ec-w64-mingw32-gcc'
          cpp = 'arm64ec-w64-mingw32-g++'
          ld = 'arm64ec-w64-mingw32-ld'
          windres = 'arm64ec-w64-mingw32-windres'
          widl = 'arm64ec-w64-mingw32-widl'
          strip = 'llvm-strip'

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF
          echo "Meson cross file:" && cat arm64ec.meson

      - name: Pre-flight check
        working-directory: dxvk
        run: |
          meson --version
          test -f meson.build || { echo "::error::meson.build not found in $PWD"; ls -la; exit 1; }

      - name: Configure (Meson)
        working-directory: dxvk
        run: |
          meson setup build.w64 . --cross-file arm64ec.meson --buildtype release --prefix "$PWD/install"

      - name: Build
        working-directory: dxvk
        run: meson compile -C build.w64

      - name: Install into staging dir
        working-directory: dxvk
        run: meson install -C build.w64

      - name: Upload DLL artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec-dlls
          path: |
            dxvk/install/bin/*.dll
            dxvk/install/bin/*.pdb
          if-no-files-found: error
