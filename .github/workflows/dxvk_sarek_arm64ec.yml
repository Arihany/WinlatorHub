name: Fast DXVK-Sarek ARM64EC build (MSVC)

on:
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: pwsh

jobs:
  build:
    name: Build ARM64EC from Sarek main (no extras)
    runs-on: windows-2022
    timeout-minutes: 60
    env:
      SAREK_REPO: pythonlover02/DXVK-Sarek
      PREFIX_ARM64EC: ${{ github.workspace }}\dist-arm64ec

    steps:
      - name: Ensure Git & Python tooling
        run: |
          $ErrorActionPreference = 'Stop'
          python -V
          git --version
          python -m pip install --upgrade pip
          pip install meson ninja

      - name: Install Vulkan SDK (headers/tools only)
        uses: humbletim/install-vulkan-sdk@v1.2
        with:
          version: 1.4.309.0
          cache: true

      - name: Activate VS DevCmd (x64 host)
        run: |
          $ErrorActionPreference = 'Stop'
          $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vswhere)) { throw "vswhere not found" }
          $instPath = & $vswhere -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
          if (-not $instPath) { throw "VS installation not found" }
          $bat = Join-Path $instPath "Common7\Tools\VsDevCmd.bat"
          & cmd /c "`"$bat`" -arch=x64 -host_arch=x64 >nul && set" |
            ForEach-Object {
              if ($_ -match '^(.*?)=(.*)$') {
                [System.Environment]::SetEnvironmentVariable($matches[1], $matches[2])
              }
            }

      - name: Ensure VS ARM64EC toolset (best effort)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $vswhere = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vswhere)) { Write-Warning "vswhere not found"; exit 0 }
      
          # VS 설치 루트 (예: C:\Program Files\Microsoft Visual Studio\2022\Enterprise)
          $inst = & $vswhere -latest -products * -property installationPath
          if (-not $inst) { Write-Warning "Visual Studio not found"; exit 0 }
      
          # ❗vs_installer.exe는 Installer 폴더의 고정 경로에 있음 (VS 루트가 아님)
          $installer = "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vs_installer.exe"
          if (-not (Test-Path $installer)) { Write-Warning "vs_installer.exe not found at $installer"; exit 0 }
      
          & "$installer" modify `
            --installPath "$inst" `
            --add Microsoft.VisualStudio.Component.VC.Tools.ARM64EC `
            --norestart --quiet --nocache
      
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "VS ARM64EC tool add attempt failed or not needed (exit $LASTEXITCODE)"
          }

      - name: Create cl/lib wrappers + ARM64EC shim
        run: |
          $ErrorActionPreference = 'Stop'
          # 1) clwrap: normalize bad flags (-arm64EC), drop /Od, enforce /O2
          $clwrap = @'
          param([Parameter(ValueFromRemainingArguments=$true)][string[]]$Args)
          $out = New-Object System.Collections.Generic.List[string]
          foreach ($a in $Args) {
            if ($a -match '^-+arm64ec$') { $out.Add('/arm64EC'); continue }
            if ($a -ieq '/Od') { continue } # drop debug opt
            $out.Add($a)
          }
          if (-not ($out -contains '/arm64EC')) { $out.Add('/arm64EC') }
          if (-not ($out -contains '/O2'))      { $out.Add('/O2') }
          & cl.exe @out
          exit $LASTEXITCODE
          '@
          Set-Content -Path "$env:GITHUB_WORKSPACE\clwrap.ps1" -Value $clwrap -Encoding ascii

          # 2) libwrap: response-file to avoid arg length issues
          $libwrap = @'
          param([Parameter(ValueFromRemainingArguments=$true)][string[]]$Args)
          $rsp = [System.IO.Path]::GetTempFileName()
          Set-Content -Path $rsp -Encoding ascii -Value ($Args -join [Environment]::NewLine)
          & lib.exe "@$rsp"
          $code = $LASTEXITCODE
          Remove-Item $rsp -Force -ErrorAction SilentlyContinue
          exit $code
          '@
          Set-Content -Path "$env:GITHUB_WORKSPACE\libwrap.ps1" -Value $libwrap -Encoding ascii

          # 3) ARM64EC shim header: SSE guards + tzcnt/lzcnt fallback
          $shim = @'
          #pragma once
          #include <intrin.h>
          #if defined(_M_ARM64EC)
            #undef __SSE__
            #undef __SSE2__
            #undef __AVX__
            #undef __AVX2__
          #endif
          #if defined(_M_ARM64) || defined(_M_ARM64EC)
            static __forceinline unsigned int __dxvk_tzcnt_u32(unsigned int x){ unsigned long i; if (_BitScanForward(&i,x)) return (unsigned)i; return 32u; }
            static __forceinline unsigned int __dxvk_lzcnt_u32(unsigned int x){ if(!x) return 32u; unsigned long m; _BitScanReverse(&m,x); return 31u-(unsigned)m; }
            #ifndef _tzcnt_u32
            #define _tzcnt_u32 __dxvk_tzcnt_u32
            #endif
            #ifndef _lzcnt_u32
            #define _lzcnt_u32 __dxvk_lzcnt_u32
            #endif
          #endif
          '@
          Set-Content -Path "$env:GITHUB_WORKSPACE\arm64ec_shim.h" -Value $shim -Encoding ascii

      - name: Create Meson cross file (MSVC ARM64EC)
        run: |
          $work = ($env:GITHUB_WORKSPACE -replace '\\','\\')
          $shim = ("$env:GITHUB_WORKSPACE\arm64ec_shim.h" -replace '\\','\\')
          $cross = @"
          [binaries]
          c = ['pwsh','-File','@WORK@\\clwrap.ps1']
          cpp = ['pwsh','-File','@WORK@\\clwrap.ps1']
          ar = ['pwsh','-File','@WORK@\\libwrap.ps1','/MACHINE:ARM64EC']
          windres = 'rc'

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'

          [built-in options]
          cpp_std = 'c++17'
          c_args = ['/DNOMINMAX','/permissive-','/EHsc','/FI','@SHIM@','/D__SSE__=0','/D__SSE2__=0','/D__AVX__=0','/D__AVX2__=0','/wd4146']
          cpp_args = ['/DNOMINMAX','/permissive-','/EHsc','/FI','@SHIM@','/D__SSE__=0','/D__SSE2__=0','/D__AVX__=0','/D__AVX2__=0','/wd4146']
          c_link_args   = ['/MACHINE:ARM64EC']
          cpp_link_args = ['/MACHINE:ARM64EC']
          "@
          $cross = $cross -replace '@WORK@', $work
          $cross = $cross -replace '@SHIM@', $shim
          Set-Content -Path "$env:GITHUB_WORKSPACE/arm64ec.msvc" -Value $cross -Encoding ascii

      - name: Clone DXVK-Sarek (main branch, shallow)
        run: |
          git clone --depth 1 --branch main --recurse-submodules "https://github.com/$env:SAREK_REPO.git" src

      - name: Quick patching for MSVC build (disable d3d8, retag HUD)
        run: |
          Set-Location src
          # Disable d3d8 subdir (WinSDK lacks d3d8.h)
          foreach ($f in @('meson.build','src\meson.build')) {
            if (Test-Path $f) {
              $txt = Get-Content $f -Raw
              $new = $txt -replace "(?m)^\s*subdir\('d3d8'\)\s*$",""
              if ($new -ne $txt) { Set-Content -Encoding ascii $f $new }
            }
          }
          # Minimal local tag to make any version queries robust
          git config user.name  ci
          git config user.email ci@local
          git tag -a v0-ci -m ci 2>$null

      - name: Ensure VS ARM64EC tools (best effort)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $vswhere = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
          if (-not (Test-Path $vswhere)) { throw "vswhere not found" }
          $inst = & $vswhere -latest -products * -property installationPath
          if (-not $inst) { throw "Visual Studio not found" }
          $installer = Join-Path $inst 'vs_installer.exe'
          & $installer modify `
            --installPath "$inst" `
            --add Microsoft.VisualStudio.Component.VC.Tools.ARM64EC `
            --norestart --quiet --nocache
          if ($LASTEXITCODE -ne 0) { Write-Warning "VS ARM64EC tool add attempt failed or not needed" }

      - name: Prepare LIB paths + stub d3d9.lib if missing (ARM64EC)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
      
          function Get-VCLibArm64EC {
            if ($env:VCToolsInstallDir) {
              $p = Join-Path $env:VCToolsInstallDir 'lib\arm64ec'
              if (Test-Path $p) { return $p }
            }
            # fallback: vswhere로 VC Tools 찾아서 최신 버전 사용
            $vswhere = "${Env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
            if (-not (Test-Path $vswhere)) { throw "vswhere not found and VCToolsInstallDir unset" }
            $inst = & $vswhere -latest -products * -property installationPath
            if (-not $inst) { throw "VS installation path not found and VCToolsInstallDir unset" }
            $msvcRoot = Join-Path $inst 'VC\Tools\MSVC'
            if (-not (Test-Path $msvcRoot)) { throw "MSVC tools root not found: $msvcRoot" }
            $ver = Get-ChildItem $msvcRoot -Directory | Sort-Object Name -Descending | Select-Object -First 1
            if (-not $ver) { throw "No MSVC tool versions found under $msvcRoot" }
            $p = Join-Path $ver.FullName 'lib\arm64ec'
            if (-not (Test-Path $p)) { throw "VC arm64ec libs not found at $p" }
            return $p
          }
      
          function Get-Win10SdkArm64EC {
            $candidates = @()
            if ($env:WindowsSdkDir) { $candidates += $env:WindowsSdkDir.TrimEnd('\','/') }
            try {
              $reg = Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows Kits\Installed Roots' -ErrorAction Stop
              if ($reg.KitsRoot10) { $candidates += $reg.KitsRoot10.TrimEnd('\','/') }
            } catch {}
            $candidates += 'C:\Program Files (x86)\Windows Kits\10'
            $candidates = $candidates | Select-Object -Unique | Where-Object { $_ -and (Test-Path $_) }
      
            foreach ($root in $candidates) {
              $libRoot = Join-Path $root 'Lib'
              if (-not (Test-Path $libRoot)) { continue }
              $vers = Get-ChildItem $libRoot -Directory -ErrorAction SilentlyContinue |
                       Where-Object { $_.Name -match '^\d+\.\d+\.\d+\.\d+$' } |
                       Sort-Object Name -Descending
              foreach ($v in $vers) {
                $ucrt = Join-Path $v.FullName 'ucrt\arm64ec'
                $um   = Join-Path $v.FullName 'um\arm64ec'
                if ((Test-Path $ucrt) -and (Test-Path $um)) {
                  return [pscustomobject]@{ UCRT=$ucrt; UM=$um; Version=$v.Name; Root=$root }
                }
              }
            }
            return $null
          }
      
          # VC toolset (ARM64EC) 경로
          $vcArm64ec = Get-VCLibArm64EC
      
          # Windows SDK (UCRT/UM) ARM64EC 경로
          $sdk = Get-Win10SdkArm64EC
          if (-not $sdk) { throw 'Windows 10/11 SDK ARM64EC libs not found (ucrt/um both missing)' }
      
          # 최종 LIB
          $env:LIB = "$vcArm64ec;$($sdk.UCRT);$($sdk.UM);" + $env:LIB
          Write-Host 'LIB configured:'
          Write-Host "  VC:   $vcArm64ec"
          Write-Host "  UCRT: $($sdk.UCRT)"
          Write-Host "  UM:   $($sdk.UM) (SDK $($sdk.Version))"
      
          # d3d9.lib 없으면 스텁 생성(링커 체크 통과용)
          $hasD3D9 = $false
          foreach ($p in ($env:LIB -split ';')) {
            if ($p -and (Test-Path (Join-Path $p 'd3d9.lib'))) { $hasD3D9 = $true; break }
          }
          if (-not $hasD3D9) {
            $stubDir = Join-Path $env:GITHUB_WORKSPACE 'stublibs\ARM64EC'
            New-Item -ItemType Directory -Force -Path $stubDir | Out-Null
            & lib.exe /nologo /machine:ARM64EC /OUT:(Join-Path $stubDir 'd3d9.lib')
            if ($LASTEXITCODE -ne 0) { throw 'Failed to create stub d3d9.lib (ARM64EC)' }
            $env:LIB = "$stubDir;" + $env:LIB
            Write-Host "Injected stub d3d9.lib -> $stubDir"
          }

      - name: Configure (Meson) — ARM64EC
        run: |
          New-Item -ItemType Directory -Force -Path "$env:GITHUB_WORKSPACE\build.ec" | Out-Null
          Set-Location "$env:GITHUB_WORKSPACE\src"
          meson setup "$env:GITHUB_WORKSPACE\build.ec" `
            --cross-file "$env:GITHUB_WORKSPACE\arm64ec.msvc" `
            --buildtype release `
            --prefix "$env:PREFIX_ARM64EC" `
            -Ddefault_library=shared `
            -Dbuild_id=false

      - name: Build (ninja) — ARM64EC
        run: |
          ninja -C "$env:GITHUB_WORKSPACE\build.ec" -j 2

      - name: Install — ARM64EC
        run: |
          meson install --no-rebuild -C "$env:GITHUB_WORKSPACE\build.ec"
          if (-not (Test-Path "$env:PREFIX_ARM64EC\bin")) { throw "No ARM64EC binaries produced" }

      - name: Upload binaries (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: dxvk-sarek-arm64ec-bin
          path: |
            ${{ env.PREFIX_ARM64EC }}\bin\*.dll
            ${{ github.workspace }}\build.ec\meson-logs\**

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: meson-logs
          path: ${{ github.workspace }}\build.ec\meson-logs\**
