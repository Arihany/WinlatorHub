name: Build FEX Stable

on:
  workflow_dispatch:
  schedule:
    - cron: "0 18 * * *" # daily (UTC)

permissions:
  contents: write

defaults:
  run:
    shell: 'bash --noprofile --norc -Eeuo pipefail {0}'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  resolve-latest:
    name: Resolve latest stable tag (API-only, fast)
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
      clean_tag: ${{ steps.tag.outputs.clean_tag }}
    steps:
      - name: Resolve latest upstream stable tag (robust)
        id: tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          OWNER="FEX-Emu"
          REPO="FEX"

          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28")
          ua=(-H "User-Agent: ${GITHUB_REPOSITORY:-fexcore-stable-workflow}")

          fetch() { curl -fsSL --retry 6 --retry-delay 2 --retry-all-errors "${auth[@]}" "${ver[@]}" "${ua[@]}" "$1"; }

          # 1) Prefer official "latest" stable release
          tag="$(fetch "$API/repos/$OWNER/$REPO/releases/latest" | jq -r .tag_name)"
          # 2) Fallback: newest non-prerelease
          if [[ -z "$tag" || "$tag" == "null" ]]; then
            tag="$(fetch "$API/repos/$OWNER/$REPO/releases?per_page=20" \
                   | jq -r '[ .[] | select(.prerelease==false) ][0].tag_name // empty')"
          fi
          [[ -z "$tag" ]] && { echo "::notice::No stable release found"; exit 0; }

          # Clean version (drop leading 'FEX-' or similar)
          clean_tag="$(sed -E 's/^[Ff][Ee][Xx]-//' <<< "$tag")"

          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "clean_tag=$clean_tag" >> "$GITHUB_OUTPUT"
          echo "Latest stable: tag=$tag clean=$clean_tag"

  ensure-release:
    name: Ensure FEX-STABLE release (header only)
    needs: resolve-latest
    if: needs.resolve-latest.outputs.tag != ''
    runs-on: ubuntu-latest
    steps:
      - name: Create/Update Release (tag = FEX-STABLE)
        uses: softprops/action-gh-release@v2
        with:
          name: "FEX-STABLE"
          tag_name: "FEX-STABLE"
          prerelease: false
          make_latest: true
          body: |
            ðŸ¤– Automated FEX-STABLE builds. (2508.1+)

            Current: ${{ needs.resolve-latest.outputs.clean_tag }}

  build-and-append:
    name: Build & append ${{ needs.resolve-latest.outputs.tag }}
    needs: [resolve-latest, ensure-release]
    if: needs.resolve-latest.outputs.tag != ''
    runs-on: ubuntu-24.04-arm
    timeout-minutes: 60

    steps:
      - name: Check if asset already exists (early exit)
        id: check
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          FILENAME: fex-${{ needs.resolve-latest.outputs.clean_tag }}.wcp
        run: |
          set -Eeuo pipefail
          API="https://api.github.com"
          auth=(-H "Authorization: Bearer ${GH_TOKEN}")
          ver=(-H "Accept: application/vnd.github+json")

          HTTP="$(curl -s -o /tmp/rel.json -w '%{http_code}' "${auth[@]}" "${ver[@]}" \
            "$API/repos/${REPO}/releases/tags/FEX-STABLE" || true)"

          if [ "$HTTP" = "200" ] && jq -e --arg N "$FILENAME" '.assets[]?.name == $N' /tmp/rel.json >/dev/null; then
            echo "skip=true" >> "$GITHUB_OUTPUT"
            echo "::notice::Found asset $FILENAME in FEX-STABLE; skipping job."
          else
            echo "skip=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install Nix
        if: steps.check.outputs.skip != 'true'
        uses: cachix/install-nix-action@v31
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Install tools
        if: steps.check.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          sudo apt-get update
          sudo apt-get install -y jq zstd curl wget git cmake ninja-build build-essential

      - name: Checkout upstream FEX at tag
        if: steps.check.outputs.skip != 'true'
        uses: actions/checkout@v4
        with:
          repository: FEX-Emu/FEX
          ref: ${{ needs.resolve-latest.outputs.tag }}
          submodules: recursive
          path: src
          fetch-depth: 1

      - name: Compile FEXCore (arm64ec + wow64)
        if: steps.check.outputs.skip != 'true'
        run: |
          set -Eeuo pipefail
          mkdir -p src/build/arm64ec && cd src/build/arm64ec
          ../../Data/nix/cmake_configure_woa64.sh ../../ -G Ninja -DTUNE_CPU=none
          ninja
          cd ../../..
          mkdir -p src/build/wow64 && cd src/build/wow64
          ../../Data/nix/cmake_configure_woa32.sh ../../ -G Ninja -DTUNE_CPU=none
          ninja
          cd ../../..

      - name: Package FEXCore DLLs and WCP
        if: steps.check.outputs.skip != 'true'
        env:
          CLEAN_TAG: ${{ needs.resolve-latest.outputs.clean_tag }}
        run: |
          set -Eeuo pipefail
          mkdir -p FEXCore_DLLs FEXCore_WCP/system32

          cp ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_DLLs/
          cp ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_DLLs/
          cp ./src/build/arm64ec/Bin/libarm64ecfex.dll ./FEXCore_WCP/system32/
          cp ./src/build/wow64/Bin/libwow64fex.dll   ./FEXCore_WCP/system32/

          DESC="FEXCore build by Ari"

          jq -n \
            --arg VER "${CLEAN_TAG}" \
            --arg DESC "$DESC" \
            --argjson VC 0 \
            --slurpfile FILES <(jq -Rn '[inputs | {source: ("system32/"+.), target: ("${system32}/"+.)}]' \
                                 < <(find FEXCore_WCP/system32 -maxdepth 1 -type f -name '*.dll' -printf '%f\n')) \
            '{
              type: "FEXCore",
              versionName: $VER,
              versionCode: $VC,
              description: $DESC,
              files: ($FILES[0] // [])
            }' > FEXCore_WCP/profile.json

          tar --zstd -cf "fex-${CLEAN_TAG}.wcp" -C FEXCore_WCP profile.json system32
          mv "fex-${CLEAN_TAG}.wcp" FEXCore_DLLs/

      - name: Upload packaged artifact (CI artifact)
        if: steps.check.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: fex-${{ needs.resolve-latest.outputs.clean_tag }}
          path: ./FEXCore_DLLs/fex-*.wcp
          if-no-files-found: error
          retention-days: 7

      - name: Append asset to release (tag = FEX-STABLE)
        if: steps.check.outputs.skip != 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "FEX-STABLE"
          files: ./FEXCore_DLLs/fex-*.wcp
